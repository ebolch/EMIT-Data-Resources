[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EMIT Data Resources",
    "section": "",
    "text": "Welcome to the EMIT-Data-Resources Cookbook!\nThis Cookbook contains background information on the EMIT instrument and imaging spectroscopy as well as Python examples and tutorials for working with EMIT datasets."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "EMIT Data Resources",
    "section": "",
    "text": "Welcome to the EMIT-Data-Resources Cookbook!\nThis Cookbook contains background information on the EMIT instrument and imaging spectroscopy as well as Python examples and tutorials for working with EMIT datasets."
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "EMIT Data Resources",
    "section": "About",
    "text": "About\nThis Cookbook is being developed as part of the collaboration between the Land Processes Distributed Active Archive Center (LP DAAC) and the Jet Propulsion Laboratory (JPL). Special thanks to the the NASA-Openscapes Team, PO DAAC, NSIDC and our contributors!"
  },
  {
    "objectID": "index.html#citation",
    "href": "index.html#citation",
    "title": "EMIT Data Resources",
    "section": "Citation",
    "text": "Citation"
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "EMIT Data Resources",
    "section": "License",
    "text": "License"
  },
  {
    "objectID": "how-tos/How_to_find_EMIT_data_using_CMR_API.html",
    "href": "how-tos/How_to_find_EMIT_data_using_CMR_API.html",
    "title": "How to: Find and Access EMIT Data",
    "section": "",
    "text": "Summary\nThis notebook will explain how to access Earth Surface Minteral Dust Source Investigation (EMIT) data programmaticly using NASA’s CMR API. The Common Metadata Repository (CMR) is a metadata system that catalogs Earth Science data and associated metadata records. The CMR Application Programming Interface (API) provides programatic search capabilities through CMR’s vast metadata holdings using various parameters and keywords. When querying NASA’s CMR, there is a limit of 1 million granules matched and only 2000 granules returned per page.\nRequirements: + A NASA Earthdata Login account is required to download EMIT data\n+ Selected the emit_tutorials environment as the kernel for this notebook. + For instructions on setting up the environment, follow the the setup_instructions.md included in the /setup/ folder of the repository.\nLearning Objectives\n- How to find EMIT data using NASA’s CMR API - How to download programmaticly\nImport the required packages\nimport requests\nimport pandas as pd\nimport datetime as dt\nimport geopandas\nfrom shapely.geometry import MultiPolygon, Polygon, box"
  },
  {
    "objectID": "how-tos/How_to_find_EMIT_data_using_CMR_API.html#obtaining-the-concept-id",
    "href": "how-tos/How_to_find_EMIT_data_using_CMR_API.html#obtaining-the-concept-id",
    "title": "How to: Find and Access EMIT Data",
    "section": "Obtaining the Concept ID",
    "text": "Obtaining the Concept ID\nNASA EarthData’s unique ID for this dataset (called Concept ID) is needed for searching the dataset. The dataset Digital Object Identifier or DOI can be used to obtain the Concept ID. DOIs can be found by clicking the Citation link on the LP DAAC’s EMIT Product Pages.\n\ndoi = '10.5067/EMIT/EMITL2ARFL.001'# EMIT L2A Reflectance\n\n# CMR API base url\ncmrurl='https://cmr.earthdata.nasa.gov/search/' \n\ndoisearch = cmrurl + 'collections.json?doi=' + doi\nconcept_id = requests.get(doisearch).json()['feed']['entry'][0]['id']\nprint(concept_id)\n\nC2408750690-LPCLOUD\n\n\nThis is the unique NASA-given concept ID for the EMIT L2A Reflectance dataset, which can be used to retrieve relevant files (or granules)."
  },
  {
    "objectID": "how-tos/How_to_find_EMIT_data_using_CMR_API.html#searching-using-cmr-api",
    "href": "how-tos/How_to_find_EMIT_data_using_CMR_API.html#searching-using-cmr-api",
    "title": "How to: Find and Access EMIT Data",
    "section": "Searching using CMR API",
    "text": "Searching using CMR API\nWhen searching the CMR API, users can provide spatial bounds and date-time ranges to narrow their search. These spatial bounds can be either, points, a bounding box, or a polygon.\nSpecify start time and dates and reformat them to the structure necessary for searching CMR.\n\n# Temporal Bound - Year, month, day. Hour, minutes, and seconds (ZULU) can also be included \nstart_date = dt.datetime(2022, 9, 3)\nend_date = dt.datetime(2022, 9, 3, 23, 23, 59)  \n\n# CMR formatted start and end times\ndt_format = '%Y-%m-%dT%H:%M:%SZ'\ntemporal_str = start_date.strftime(dt_format) + ',' + end_date.strftime(dt_format)\nprint(temporal_str)\n\n2022-09-03T00:00:00Z,2022-09-03T23:23:59Z\n\n\nThe CMR API only allows 2000 results to be shown at a time. Using page_num allows a user to loop through the search result pages. The sections below walk through using Points, Bounding Boxes, and Polygons to spatially constrain a search made using the CMR API.\n\nSearch using Points\nTo search using a point we specify a latitude and longitude.\n\n# Search using a Point\n\nlon = -62.1123\nlat = -39.89402\npoint_str = str(lon) +','+ str(lat)\n\npage_num = 1\npage_size = 2000 # CMR page size limit\n\ngranule_arr = []\n\nwhile True:\n    \n     # defining parameters\n    cmr_param = {\n        \"collection_concept_id\": concept_id, \n        \"page_size\": page_size,\n        \"page_num\": page_num,\n        \"temporal\": temporal_str,\n        \"point\":point_str\n    }\n\n    granulesearch = cmrurl + 'granules.json'\n    response = requests.post(granulesearch, data=cmr_param)\n    granules = response.json()['feed']['entry']\n       \n    if granules:\n        for g in granules:\n            granule_urls = ''\n            granule_poly = ''\n                       \n            # read cloud cover\n            cloud_cover = g['cloud_cover']\n    \n            # reading bounding geometries\n            if 'polygons' in g:\n                polygons= g['polygons']\n                multipolygons = []\n                for poly in polygons:\n                    i=iter(poly[0].split (\" \"))\n                    ltln = list(map(\" \".join,zip(i,i)))\n                    multipolygons.append(Polygon([[float(p.split(\" \")[1]), float(p.split(\" \")[0])] for p in ltln]))\n                granule_poly = MultiPolygon(multipolygons)\n            \n            # Get https URLs to .nc files and exclude .dmrpp files\n            granule_urls = [x['href'] for x in g['links'] if 'https' in x['href'] and '.nc' in x['href'] and '.dmrpp' not in x['href']]\n            # Add to list\n            granule_arr.append([granule_urls, cloud_cover, granule_poly])\n                           \n        page_num += 1\n    else: \n        break\nprint(granule_arr)\n\n[[['https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/EMITL2ARFL.001/EMIT_L2A_RFL_001_20220903T163129_2224611_012/EMIT_L2A_RFL_001_20220903T163129_2224611_012.nc', 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/EMITL2ARFL.001/EMIT_L2A_RFL_001_20220903T163129_2224611_012/EMIT_L2A_RFLUNCERT_001_20220903T163129_2224611_012.nc', 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/EMITL2ARFL.001/EMIT_L2A_RFL_001_20220903T163129_2224611_012/EMIT_L2A_MASK_001_20220903T163129_2224611_012.nc'], '82', &lt;MULTIPOLYGON (((-62.089 -39.242, -62.512 -39.943, -61.66 -40.457, -61.237 -...&gt;]]\n\n\n\n\nSearch using a bounding box\nFor this we’ll use a bounding box along the coast of Argentina with a bottom left corner of -62.1123 Longitude, -39.89402 Latitude, and a top right corner of -61.70801 Longitude and -39.57769 Latitude.\n\n# Search Using a Bounding Box\nbound = (-62.1123, -39.89402, -61.70801, -39.57769) \nbound_str = ','.join(map(str,bound))\n\npage_num = 1\npage_size = 2000 # CMR page size limit\n\ngranule_arr = []\n\nwhile True:\n    \n     # defining parameters\n    cmr_param = {\n        \"collection_concept_id\": concept_id, \n        \"page_size\": page_size,\n        \"page_num\": page_num,\n        \"temporal\": temporal_str,\n        \"bounding_box[]\":bound_str\n    }\n\n    granulesearch = cmrurl + 'granules.json'\n    response = requests.post(granulesearch, data=cmr_param)\n    granules = response.json()['feed']['entry']\n       \n    if granules:\n        for g in granules:\n            granule_urls = ''\n            granule_poly = ''\n                       \n            # read cloud cover\n            cloud_cover = g['cloud_cover']\n    \n            # reading results bounding geometries\n            if 'polygons' in g:\n                polygons= g['polygons']\n                multipolygons = []\n                for poly in polygons:\n                    i=iter(poly[0].split (\" \"))\n                    ltln = list(map(\" \".join,zip(i,i)))\n                    multipolygons.append(Polygon([[float(p.split(\" \")[1]), float(p.split(\" \")[0])] for p in ltln]))\n                granule_poly = MultiPolygon(multipolygons)\n            \n            # Get https URLs to .nc files and exclude .dmrpp files\n            granule_urls = [x['href'] for x in g['links'] if 'https' in x['href'] and '.nc' in x['href'] and '.dmrpp' not in x['href']]\n            # Add to list\n            granule_arr.append([granule_urls, cloud_cover, granule_poly])\n                           \n        page_num += 1\n    else: \n        break\nprint(granule_arr)\n\n[[['https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/EMITL2ARFL.001/EMIT_L2A_RFL_001_20220903T163129_2224611_012/EMIT_L2A_RFL_001_20220903T163129_2224611_012.nc', 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/EMITL2ARFL.001/EMIT_L2A_RFL_001_20220903T163129_2224611_012/EMIT_L2A_RFLUNCERT_001_20220903T163129_2224611_012.nc', 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/EMITL2ARFL.001/EMIT_L2A_RFL_001_20220903T163129_2224611_012/EMIT_L2A_MASK_001_20220903T163129_2224611_012.nc'], '82', &lt;MULTIPOLYGON (((-62.089 -39.242, -62.512 -39.943, -61.66 -40.457, -61.237 -...&gt;]]\n\n\n\n\nSearch a Polygon\nA polygon can also be used to spatially search using the CMR API. A shapefile, geojson, or other format can be opened as a geopandas dataframe, then reformatted to a geojson format to be sent as a parameter in the CMR search. Note that very complex shapefiles must be simplified, there is a 5000 coordinate limit.\n\n# Search using a Polygon\npolygon = geopandas.read_file('../../data/isla_gaviota.geojson')\ngeojson = {\"shapefile\": (\"isla_gaviota.geojson\", polygon.geometry.to_json(), \"application/geo+json\")}\n\npage_num = 1\npage_size = 2000 # CMR page size limit\n\ngranule_arr = []\n\nwhile True:\n    \n     # defining parameters\n    cmr_param = {\n        \"collection_concept_id\": concept_id, \n        \"page_size\": page_size,\n        \"page_num\": page_num,\n        \"temporal\": temporal_str,\n        \"simplify-shapefile\": 'true' # this is needed to bypass 5000 coordinates limit of CMR\n    }\n\n    granulesearch = cmrurl + 'granules.json'\n    response = requests.post(granulesearch, data=cmr_param, files=geojson)\n    granules = response.json()['feed']['entry']\n       \n    if granules:\n        for g in granules:\n            granule_urls = ''\n            granule_poly = ''\n                       \n            # read granule title and cloud cover\n            granule_name = g['title']\n            cloud_cover = g['cloud_cover']\n    \n            # reading bounding geometries\n            if 'polygons' in g:\n                polygons= g['polygons']\n                multipolygons = []\n                for poly in polygons:\n                    i=iter(poly[0].split (\" \"))\n                    ltln = list(map(\" \".join,zip(i,i)))\n                    multipolygons.append(Polygon([[float(p.split(\" \")[1]), float(p.split(\" \")[0])] for p in ltln]))\n                granule_poly = MultiPolygon(multipolygons)\n            \n            # Get https URLs to .nc files and exclude .dmrpp files\n            granule_urls = [x['href'] for x in g['links'] if 'https' in x['href'] and '.nc' in x['href'] and '.dmrpp' not in x['href']]\n            # Add to list\n            granule_arr.append([granule_urls, cloud_cover, granule_poly])\n                           \n        page_num += 1\n    else: \n        break\n \nprint(granule_arr)\n\n[[['https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/EMITL2ARFL.001/EMIT_L2A_RFL_001_20220903T163129_2224611_012/EMIT_L2A_RFL_001_20220903T163129_2224611_012.nc', 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/EMITL2ARFL.001/EMIT_L2A_RFL_001_20220903T163129_2224611_012/EMIT_L2A_RFLUNCERT_001_20220903T163129_2224611_012.nc', 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/EMITL2ARFL.001/EMIT_L2A_RFL_001_20220903T163129_2224611_012/EMIT_L2A_MASK_001_20220903T163129_2224611_012.nc'], '82', &lt;MULTIPOLYGON (((-62.089 -39.242, -62.512 -39.943, -61.66 -40.457, -61.237 -...&gt;]]\n\n\n\nNote: At the time this tutorial was made, all 3 searches, point, bounding box, and polygon should result in the same assets being returned.\n\n\n\nCreating a Dataframe with the resulting Links\nA pandas.dataframe can be used to store the download URLs and geometries of each file. The EMIT L2A Reflectance and Uncertainty and Mask collection contains 3 assets per granule (reflectance, reflectance uncertainty, and masks). We can see when printing this list, that there are three assets that correspond to a single polygon. For the next step we will place these into a dataframe and ‘explode’ the dataframe to place each of these in a separate row. If we only want a subset of these assets, we can filter them out.\n\n# creating a pandas dataframe\ncmr_results_df = pd.DataFrame(granule_arr, columns=[\"asset_url\", \"cloud_cover\", \"granule_poly\"])\n# Drop granules with empty geometry - if any exist\ncmr_results_df = cmr_results_df[cmr_results_df['granule_poly'] != '']\n# Expand so each row contains a single url \ncmr_results_df = cmr_results_df.explode('asset_url')\n# Name each asset based on filename\ncmr_results_df.insert(0,'asset_name', cmr_results_df.asset_url.str.split('/',n=-1).str.get(-1))\n\ncmr_results_df\n\n\n\n\n\n\n\n\nasset_name\nasset_url\ncloud_cover\ngranule_poly\n\n\n\n\n0\nEMIT_L2A_RFL_001_20220903T163129_2224611_012.nc\nhttps://data.lpdaac.earthdatacloud.nasa.gov/lp...\n82\nMULTIPOLYGON (((-62.0887375 -39.242054, -62.51...\n\n\n0\nEMIT_L2A_RFLUNCERT_001_20220903T163129_2224611...\nhttps://data.lpdaac.earthdatacloud.nasa.gov/lp...\n82\nMULTIPOLYGON (((-62.0887375 -39.242054, -62.51...\n\n\n0\nEMIT_L2A_MASK_001_20220903T163129_2224611_012.nc\nhttps://data.lpdaac.earthdatacloud.nasa.gov/lp...\n82\nMULTIPOLYGON (((-62.0887375 -39.242054, -62.51...\n\n\n\n\n\n\n\nAt this stage we can filter based on the assets that we want or the cloud cover. For this example lets say we are only interested in the Reflectance and the Mask. To filter by asset, we can match strings included in the asset name.\n\ncmr_results_df = cmr_results_df[cmr_results_df.asset_name.str.contains('_RFL_') | cmr_results_df.asset_name.str.contains('MASK')]\ncmr_results_df\n\n\n\n\n\n\n\n\nasset_name\nasset_url\ncloud_cover\ngranule_poly\n\n\n\n\n0\nEMIT_L2A_RFL_001_20220903T163129_2224611_012.nc\nhttps://data.lpdaac.earthdatacloud.nasa.gov/lp...\n82\nMULTIPOLYGON (((-62.0887375 -39.242054, -62.51...\n\n\n0\nEMIT_L2A_MASK_001_20220903T163129_2224611_012.nc\nhttps://data.lpdaac.earthdatacloud.nasa.gov/lp...\n82\nMULTIPOLYGON (((-62.0887375 -39.242054, -62.51...\n\n\n\n\n\n\n\nAfter filtering down to the assets you want, you can output a text file with the asset urls or save the entire dataframe, then use a utility such as wget or the DAAC Data Download Tool to download the files. To download you will need to set up NASA Earthdata Login authentication using a .netrc file.\nSave the asset urls to a textfile in the /data/ folder.\n\n# Save text file of asset urls\ncmr_results_dfs = cmr_results_df[:-1].drop_duplicates(subset=['asset_url']) # Remove any duplicates\ncmr_results_df.to_csv('../../data/emit_asset_urls.txt', columns = ['asset_url'], index=False, header = False)"
  },
  {
    "objectID": "how-tos/How_to_find_EMIT_data_using_CMR_API.html#downloading-files-using-the-list-of-urlstext-file",
    "href": "how-tos/How_to_find_EMIT_data_using_CMR_API.html#downloading-files-using-the-list-of-urlstext-file",
    "title": "How to: Find and Access EMIT Data",
    "section": "Downloading Files using the list of URLS/Text File",
    "text": "Downloading Files using the list of URLS/Text File\nTo download the files using the DAAC Data Downloader, clone that repository and execute the python script included from the command line.\n\n!git clone https://git.earthdata.nasa.gov/scm/lpdur/daac_data_download_python.git ../daac_data_download_python/\n\n\n!python ../daac_data_download_python/DAACDataDownload.py -dir ../../data/ -f ../../data/emit_asset_urls.txt\n\nTo download using wget, use the following in the command line.\n\n!wget -P ../../data/ -i ../../data/emit_asset_urls.txt"
  },
  {
    "objectID": "how-tos/How_to_find_EMIT_data_using_CMR_API.html#contact-info",
    "href": "how-tos/How_to_find_EMIT_data_using_CMR_API.html#contact-info",
    "title": "How to: Find and Access EMIT Data",
    "section": "Contact Info:",
    "text": "Contact Info:\nEmail: LPDAAC@usgs.gov\nVoice: +1-866-573-3222\nOrganization: Land Processes Distributed Active Archive Center (LP DAAC)¹\nWebsite: https://lpdaac.usgs.gov/\nDate last modified: 05-30-2023\n¹Work performed under USGS contract G15PD00467 for NASA contract NNG14HH33I."
  },
  {
    "objectID": "how-tos/How_to_Convert_to_ENVI.html",
    "href": "how-tos/How_to_Convert_to_ENVI.html",
    "title": "How To: Convert EMIT .nc to .envi",
    "section": "",
    "text": "There are currently 2 similar methods to convert the EMIT netCDF4 files to .envi format. Note these only support L1B Radiance, L1B Obs, L2A Reflectance, L2A Reflectance Uncertainty, or L2A Mask to .envi. They do not yet support the L2B Mineral or L2B Mineral Uncertainty products. 1. The write_envi function in EMIT tools. This function is still being developed but will currently: - Write a GLT output to use for orthocorrection later - Functions from emit_tools can be used beforehand to orthorectify if so desired 2. The reformat.py script available in the emit-sds/emit-utils repository can be used to convert EMIT netCDF files (as delivered to the LP DAAC) to ENVI files. This script also can apply the included GLT to orthorectify the image if desired.\nThis jupyter notebook walks through how to use both methods to provide users with programmatic routes to accomplish their EMIT reformatting workflows.\nRequirements: + A NASA Earthdata Login account is required to download EMIT data\n+ Selected the emit_tutorials environment as the kernel for this notebook. + For instructions on setting up the environment, follow the the setup_instructions.md included in the /setup/ folder of the repository.\nLearning Objectives + How to use the write_envi function from emit_tools module to convert an EMIT netCDF4 to a .envi file. + How to use the reformat.py function from the emit-utils repository to convert an EMIT netCDF4 to a .envi file."
  },
  {
    "objectID": "how-tos/How_to_Convert_to_ENVI.html#setup",
    "href": "how-tos/How_to_Convert_to_ENVI.html#setup",
    "title": "How To: Convert EMIT .nc to .envi",
    "section": "Setup",
    "text": "Setup\nImport packages\n\nimport os\nimport earthaccess\n\n\nAuthenticate using Earthdata Login and Download the required Granules\nLogin to your NASA Earthdata account and create a .netrc file using the login function from the earthaccess library. If you do not have an Earthdata Account, you can create one here.\n\nearthaccess.login(persist=True)\n\nEARTHDATA_USERNAME and EARTHDATA_PASSWORD are not set in the current environment, try setting them or use a different strategy (netrc, interactive)\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 07/08/2023\nUsing .netrc file for EDL\n\n\n&lt;earthaccess.auth.Auth at 0x25e2e122010&gt;\n\n\nFor this notebook we will download the files necessary using earthaccess. You can also access the data in place or stream it, but this can slow due to the file sizes. Provide a URL for an EMIT L2A Reflectance granule.\n\nurl = 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/EMITL2ARFL.001/EMIT_L2A_RFL_001_20220903T163129_2224611_012/EMIT_L2A_RFL_001_20220903T163129_2224611_012.nc'\n\nGet an HTTPS Session using your earthdata login, set a local path to save the file, and download the granule asset - This may take a while, the reflectance file is approximately 1.8 GB.\n\n# Get Https Session using Earthdata Login Info\nfs = earthaccess.get_fsspec_https_session()\n# Retrieve granule asset ID from URL (to maintain existing naming convention)\ngranule_asset_id = url.split('/')[-1]\n# Define Local Filepath\nfp = f'../../data/{granule_asset_id}'\n# Download the Granule Asset if it doesn't exist\nif not os.path.isfile(fp):\n    fs.download(url, fp)\n\nNow lets create an output folder where we will save the .envi files.\n\noutpath = '../../data/envi' \nif not os.path.exists(outpath):\n    os.makedirs(outpath)"
  },
  {
    "objectID": "how-tos/How_to_Convert_to_ENVI.html#method-1-using-write_envi-from-the-emit_tools-module.",
    "href": "how-tos/How_to_Convert_to_ENVI.html#method-1-using-write_envi-from-the-emit_tools-module.",
    "title": "How To: Convert EMIT .nc to .envi",
    "section": "Method 1: Using write_envi from the emit_tools module.",
    "text": "Method 1: Using write_envi from the emit_tools module.\nImport the necessary packages for this method.\n\nimport sys\nsys.path.append('../modules/')\nimport emit_tools as et\n\nOpen the granule using the emit_xarray function. We can orthorectify here if so desired.\n\nds = et.emit_xarray(fp, ortho=True)\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:           (latitude: 2009, longitude: 2353, wavelengths: 285)\nCoordinates:\n  * latitude          (latitude) float64 -39.31 -39.31 -39.31 ... -40.4 -40.4\n  * longitude         (longitude) float64 -62.51 -62.51 -62.51 ... -61.24 -61.24\n  * wavelengths       (wavelengths) float32 381.0 388.4 ... 2.486e+03 2.493e+03\n    good_wavelengths  (wavelengths) float32 1.0 1.0 1.0 1.0 ... 1.0 1.0 1.0 1.0\n    fwhm              (wavelengths) float32 8.415 8.415 8.415 ... 8.807 8.809\n    elev              (latitude, longitude) float32 nan nan nan ... nan nan nan\n    spatial_ref       int32 0\nData variables:\n    reflectance       (latitude, longitude, wavelengths) float32 nan nan ... nan\nAttributes: (12/40)\n    ncei_template_version:             NCEI_NetCDF_Swath_Template_v2.0\n    summary:                           The Earth Surface Mineral Dust Source ...\n    keywords:                          Imaging Spectroscopy, minerals, EMIT, ...\n    Conventions:                       CF-1.63\n    sensor:                            EMIT (Earth Surface Mineral Dust Sourc...\n    instrument:                        EMIT\n    ...                                ...\n    spatial_ref:                       GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHER...\n    geotransform:                      [-6.25120945e+01  5.42232520e-04 -0.00...\n    day_night_flag:                    Day\n    title:                             EMIT L2A Estimated Surface Reflectance...\n    granule_id:                        EMIT_L2A_RFL_001_20220903T163129_22246...\n    Orthorectified:                    Truexarray.DatasetDimensions:latitude: 2009longitude: 2353wavelengths: 285Coordinates: (7)latitude(latitude)float64-39.31 -39.31 ... -40.4 -40.4long_name :Latitude (WGS-84)units :degrees northarray([-39.30703 , -39.307572, -39.308115, ..., -40.394749, -40.395291,\n       -40.395833])longitude(longitude)float64-62.51 -62.51 ... -61.24 -61.24long_name :Longitude (WGS-84)units :degrees eastarray([-62.511823, -62.511281, -62.510739, ..., -61.237577, -61.237035,\n       -61.236493])wavelengths(wavelengths)float32381.0 388.4 ... 2.486e+03 2.493e+03long_name :Wavelength Centersunits :nmarray([ 381.00558,  388.4092 ,  395.81583, ..., 2478.153  , 2485.5386 ,\n       2492.9238 ], dtype=float32)good_wavelengths(wavelengths)float321.0 1.0 1.0 1.0 ... 1.0 1.0 1.0 1.0long_name :Wavelengths where reflectance is useable: 1 = good data, 0 = bad dataunits :unitlessarray([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)fwhm(wavelengths)float328.415 8.415 8.415 ... 8.807 8.809long_name :Full Width at Half Maxunits :nmarray([8.415, 8.415, 8.415, 8.415, 8.417, 8.418, 8.419, 8.421, 8.422,\n       8.424, 8.425, 8.426, 8.428, 8.429, 8.431, 8.432, 8.433, 8.435,\n       8.436, 8.438, 8.439, 8.44 , 8.442, 8.443, 8.445, 8.446, 8.447,\n       8.449, 8.45 , 8.452, 8.453, 8.454, 8.456, 8.457, 8.459, 8.46 ,\n       8.461, 8.463, 8.464, 8.466, 8.467, 8.468, 8.47 , 8.471, 8.473,\n       8.474, 8.475, 8.477, 8.478, 8.48 , 8.481, 8.482, 8.484, 8.485,\n       8.487, 8.488, 8.489, 8.491, 8.492, 8.494, 8.495, 8.496, 8.498,\n       8.499, 8.501, 8.502, 8.503, 8.505, 8.506, 8.508, 8.509, 8.51 ,\n       8.512, 8.513, 8.515, 8.516, 8.517, 8.519, 8.52 , 8.522, 8.523,\n       8.524, 8.526, 8.527, 8.529, 8.53 , 8.531, 8.533, 8.534, 8.536,\n       8.537, 8.538, 8.54 , 8.541, 8.543, 8.544, 8.545, 8.547, 8.548,\n       8.55 , 8.551, 8.552, 8.554, 8.555, 8.557, 8.558, 8.559, 8.561,\n       8.562, 8.564, 8.565, 8.566, 8.568, 8.569, 8.571, 8.572, 8.573,\n       8.575, 8.576, 8.578, 8.579, 8.58 , 8.582, 8.583, 8.585, 8.586,\n       8.587, 8.589, 8.59 , 8.592, 8.593, 8.594, 8.596, 8.597, 8.599,\n       8.6  , 8.601, 8.603, 8.604, 8.606, 8.607, 8.608, 8.61 , 8.611,\n       8.613, 8.614, 8.615, 8.617, 8.618, 8.62 , 8.621, 8.622, 8.624,\n       8.625, 8.627, 8.628, 8.629, 8.631, 8.632, 8.634, 8.635, 8.636,\n       8.638, 8.639, 8.641, 8.642, 8.643, 8.645, 8.646, 8.648, 8.649,\n       8.65 , 8.652, 8.653, 8.655, 8.656, 8.657, 8.659, 8.66 , 8.662,\n       8.663, 8.664, 8.666, 8.667, 8.669, 8.67 , 8.671, 8.673, 8.674,\n       8.676, 8.677, 8.678, 8.68 , 8.681, 8.683, 8.684, 8.685, 8.687,\n       8.688, 8.69 , 8.691, 8.692, 8.694, 8.695, 8.697, 8.698, 8.699,\n       8.701, 8.702, 8.704, 8.705, 8.706, 8.708, 8.709, 8.711, 8.712,\n       8.714, 8.715, 8.716, 8.718, 8.719, 8.721, 8.722, 8.723, 8.725,\n       8.726, 8.727, 8.729, 8.73 , 8.732, 8.733, 8.734, 8.736, 8.737,\n       8.739, 8.74 , 8.741, 8.743, 8.744, 8.746, 8.747, 8.748, 8.75 ,\n       8.751, 8.753, 8.754, 8.755, 8.757, 8.758, 8.76 , 8.761, 8.763,\n       8.764, 8.765, 8.767, 8.768, 8.77 , 8.771, 8.772, 8.774, 8.775,\n       8.777, 8.778, 8.779, 8.781, 8.782, 8.783, 8.785, 8.786, 8.788,\n       8.789, 8.79 , 8.792, 8.793, 8.795, 8.796, 8.797, 8.799, 8.8  ,\n       8.802, 8.803, 8.804, 8.806, 8.807, 8.809], dtype=float32)elev(latitude, longitude)float32nan nan nan nan ... nan nan nan nanlong_name :Surface Elevationunits :marray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]], dtype=float32)spatial_ref()int320crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]array(0)Data variables: (1)reflectance(latitude, longitude, wavelengths)float32nan nan nan nan ... nan nan nan nanlong_name :Surface Reflectanceunits :unitlessarray([[[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]],\n\n       [[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]],\n\n       [[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n...\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]],\n\n       [[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]],\n\n       [[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]]], dtype=float32)Indexes: (3)latitudePandasIndexPandasIndex(Index([ -39.30703026376183, -39.307572496282084, -39.308114728802344,\n         -39.3086569613226,  -39.30919919384286,  -39.30974142636311,\n        -39.31028365888337, -39.310825891403624, -39.311368123923884,\n        -39.31191035644414,\n       ...\n        -40.39095307175431, -40.391495304274564, -40.392037536794824,\n        -40.39257976931508,  -40.39312200183534,  -40.39366423435559,\n        -40.39420646687584, -40.394748699396104,  -40.39529093191636,\n        -40.39583316443662],\n      dtype='float64', name='latitude', length=2009))longitudePandasIndexPandasIndex(Index([ -62.51182341653617, -62.511281184015914, -62.510738951495654,\n         -62.5101967189754,  -62.50965448645514,  -62.50911225393489,\n        -62.50857002141463, -62.508027788894374, -62.507485556374114,\n        -62.50694332385386,\n       ...\n         -61.2413726215755,  -61.24083038905524,  -61.24028815653499,\n        -61.23974592401473, -61.239203691494474,  -61.23866145897422,\n        -61.23811922645396,  -61.23757699393371,  -61.23703476141345,\n       -61.236492528893194],\n      dtype='float64', name='longitude', length=2353))wavelengthsPandasIndexPandasIndex(Index([ 381.0055847167969,  388.4092102050781,  395.8158264160156,\n       403.22540283203125, 410.63800048828125,  418.0535888671875,\n        425.4721374511719,  432.8927001953125,  440.3172607421875,\n        447.7427978515625,\n       ...\n        2426.440185546875,  2433.830322265625,   2441.21826171875,\n          2448.6064453125,  2455.994384765625,  2463.381591796875,\n        2470.767822265625,  2478.153076171875,   2485.53857421875,\n           2492.923828125],\n      dtype='float32', name='wavelengths', length=285))Attributes: (40)ncei_template_version :NCEI_NetCDF_Swath_Template_v2.0summary :The Earth Surface Mineral Dust Source Investigation (EMIT) is an Earth Ventures-Instrument (EVI-4) Mission that maps the surface mineralogy of arid dust source regions via imaging spectroscopy in the visible and short-wave infrared (VSWIR). Installed on the International Space Station (ISS), the EMIT instrument is a Dyson imaging spectrometer that uses contiguous spectroscopic measurements from 410 to 2450 nm to resolve absoprtion features of iron oxides, clays, sulfates, carbonates, and other dust-forming minerals. During its one-year mission, EMIT will observe the sunlit Earth's dust source regions that occur within +/-52° latitude and produce maps of the source regions that can be used to improve forecasts of the role of mineral dust in the radiative forcing (warming or cooling) of the atmosphere.\\n\\nThis file contains L2A estimated surface reflectances and geolocation data. Reflectance estimates are created using an Optimal Estimation technique - see ATBD for details. Reflectance values are reported as fractions (relative to 1). Geolocation data (latitude, longitude, height) and a lookup table to project the data are also included.keywords :Imaging Spectroscopy, minerals, EMIT, dust, radiative forcingConventions :CF-1.63sensor :EMIT (Earth Surface Mineral Dust Source Investigation)instrument :EMITplatform :ISSinstitution :NASA Jet Propulsion Laboratory/California Institute of Technologylicense :https://science.nasa.gov/earth-science/earth-science-data/data-information-policy/naming_authority :LPDAACdate_created :2023-03-20T14:50:38Zkeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordsstdname_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventioncreator_name :Jet Propulsion Laboratory/California Institute of Technologycreator_url :https://earth.jpl.nasa.gov/emit/project :Earth Surface Mineral Dust Source Investigationproject_url :https://emit.jpl.nasa.gov/publisher_name :NASA LPDAACpublisher_url :https://lpdaac.usgs.govpublisher_email :lpdaac@usgs.govidentifier_product_doi_authority :https://doi.orgflight_line :emit20220903t163129_o24611_s000time_coverage_start :2022-09-03T16:31:29+0000time_coverage_end :2022-09-03T16:31:41+0000software_build_version :010603software_delivery_version :010610product_version :V001history :PGE Run Command: {python /beegfs/store/emit/ops/repos/emit-sds-l2a/spectrum_quality.py /tmp/emit/ops/emit20220903t163129_emit.L2AReflectance_20221111t160436/output/emit20220903t163129_rfl /tmp/emit/ops/emit20220903t163129_emit.L2AReflectance_20221111t160436/output/emit20220903t163129_rfl_quality.txt}, PGE Input Files: {radiance_file=/beegfs/store/emit/ops/data/acquisitions/20220903/emit20220903t163129/l1b/emit20220903t163129_o24611_s000_l1b_rdn_b0106_v01.img, pixel_locations_file=/beegfs/store/emit/ops/data/acquisitions/20220903/emit20220903t163129/l1b/emit20220903t163129_o24611_s000_l1b_loc_b0106_v01.img, observation_parameters_file=/beegfs/store/emit/ops/data/acquisitions/20220903/emit20220903t163129/l1b/emit20220903t163129_o24611_s000_l1b_obs_b0106_v01.img, surface_model_config=/beegfs/store/emit/ops/repos/emit-sds-l2a/surface/surface_20221020.json}crosstrack_orientation :as seen on groundeasternmost_longitude :-61.236221412633064northernmost_latitude :-39.3067591475017westernmost_longitude :-62.5120945327963southernmost_latitude :-40.39610428069674spatialResolution :0.000542232520256367spatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]geotransform :[-6.25120945e+01  5.42232520e-04 -0.00000000e+00 -3.93067591e+01\n -0.00000000e+00 -5.42232520e-04]day_night_flag :Daytitle :EMIT L2A Estimated Surface Reflectance 60 m V001granule_id :EMIT_L2A_RFL_001_20220903T163129_2224611_012Orthorectified :True\n\n\nNow, write the dataset as an .envi output. If we chose not to orthorectify, you can include a glt file to orthorectify later.\n\net.write_envi(ds, outpath, overwrite=False, extension='.img', interleave='BIL', glt_file=False)"
  },
  {
    "objectID": "how-tos/How_to_Convert_to_ENVI.html#method-2-using-reformat.py-from-emit-utils",
    "href": "how-tos/How_to_Convert_to_ENVI.html#method-2-using-reformat.py-from-emit-utils",
    "title": "How To: Convert EMIT .nc to .envi",
    "section": "Method 2: Using reformat.py from emit-utils",
    "text": "Method 2: Using reformat.py from emit-utils\n\n2.1 Clone and Install emit-utils\nClone the emit-utils repository.\n\n!git clone https://github.com/emit-sds/emit-utils.git ../emit_utils/\n\nCloning into '../emit_utils'...\n\n\nThis will copy the emit-utils repository to a folder within this repository.\nAfter you have copied it, use pip package manager to install the directory as a package to ensure you have all of the dependencies and be used in the command line.\n\nThis requires that some dependencies already be installed to work properly on Windows. If you have created the Python environment described in the setup instructions it should work.\n\n\n!pip install --editable ../emit_utils\n\nObtaining file:///C:/Users/ebolch/repos/EMIT-Data-Resources/python/emit_utils\n  Preparing metadata (setup.py): started\n  Preparing metadata (setup.py): finished with status 'done'\nRequirement already satisfied: gdal&gt;=2.0 in c:\\users\\ebolch\\appdata\\local\\mambaforge\\envs\\emit_tutorials_311\\lib\\site-packages (from emit-utils==1.2.3) (3.6.4)\nRequirement already satisfied: spectral&gt;=0.21 in c:\\users\\ebolch\\appdata\\local\\mambaforge\\envs\\emit_tutorials_311\\lib\\site-packages (from emit-utils==1.2.3) (0.23.1)\nRequirement already satisfied: numpy&gt;=1.19.2 in c:\\users\\ebolch\\appdata\\local\\mambaforge\\envs\\emit_tutorials_311\\lib\\site-packages (from emit-utils==1.2.3) (1.24.4)\nRequirement already satisfied: netcdf4&gt;=1.5.8 in c:\\users\\ebolch\\appdata\\local\\mambaforge\\envs\\emit_tutorials_311\\lib\\site-packages (from emit-utils==1.2.3) (1.6.4)\nCollecting argparse&gt;=1.0 (from emit-utils==1.2.3)\n  Using cached argparse-1.4.0-py2.py3-none-any.whl (23 kB)\nRequirement already satisfied: cftime in c:\\users\\ebolch\\appdata\\local\\mambaforge\\envs\\emit_tutorials_311\\lib\\site-packages (from netcdf4&gt;=1.5.8-&gt;emit-utils==1.2.3) (1.6.2)\nRequirement already satisfied: certifi in c:\\users\\ebolch\\appdata\\local\\mambaforge\\envs\\emit_tutorials_311\\lib\\site-packages (from netcdf4&gt;=1.5.8-&gt;emit-utils==1.2.3) (2023.5.7)\nInstalling collected packages: argparse, emit-utils\n  Running setup.py develop for emit-utils\nSuccessfully installed argparse-1.4.0 emit-utils-1.2.3\n\n\nAfter successfully installing emit-utils, you can use the scripts contained within as part of your workflows.\n\n\n2.2 Executing the Reformat Script\nBefore calling the reformat.py script, make sure you have an output directory for the .envi files that will be produced.\n\nimport os\noutpath = '../../data/envi' \nif not os.path.exists(outpath):\n    os.makedirs(outpath)\n\nNow, execute the reformat.py script contained in the emit-utils repository. When executing this script, provide the path to the .nc file, followed by the directory to place the .envi files in. If you wish to apply the GLT or orthorectify, include --orthorectify as an argument.\n\n!python ../emit_utils/emit_utils/reformat.py ../../data/EMIT_L2A_RFL_001_20220903T163129_2224611_012.nc ../../data/envi/ --orthorectify\n\nThis will orthorectify the image, create an ENVI header, and save it in .envi format inside the ../data/envi folder."
  },
  {
    "objectID": "how-tos/How_to_Convert_to_ENVI.html#contact-info",
    "href": "how-tos/How_to_Convert_to_ENVI.html#contact-info",
    "title": "How To: Convert EMIT .nc to .envi",
    "section": "Contact Info:",
    "text": "Contact Info:\nEmail: LPDAAC@usgs.gov\nVoice: +1-866-573-3222\nOrganization: Land Processes Distributed Active Archive Center (LP DAAC)¹\nWebsite: https://lpdaac.usgs.gov/\nDate last modified: 07-06-2023\n¹Work performed under USGS contract G15PD00467 for NASA contract NNG14HH33I."
  },
  {
    "objectID": "how-tos/How_to_Extract_Area.html",
    "href": "how-tos/How_to_Extract_Area.html",
    "title": "How to: Extracting EMIT Spectra using a Shapefile/GeoJSON",
    "section": "",
    "text": "Summary\nIn this notebook we will open a netCDF4 file from the Earth Surface Minteral Dust Source Investigation (EMIT) as an xarray.Dataset. We will then extract extract or clip to an area using a .geojson file (will also work with shapefile). The workflows outlined here will work with reflectance L2A or radiance L1B data.\nRequirements: + A NASA Earthdata Login account is required to download EMIT data\n+ Selected the emit_tutorials environment as the kernel for this notebook. + For instructions on setting up the environment, follow the the setup_instructions.md included in the /setup/ folder of the repository.\nLearning Objectives\n- How to open and EMIT Dataset as an xarray.Dataset - How to extract values or clip an EMIT dataset to a region of interest - How to write a new netCDF4 output using the clipped data\nImport the required Python libraries.\n# Import Packages\nimport os\nimport earthaccess\nimport xarray as xr\nfrom osgeo import gdal\nimport rasterio as rio\nimport rioxarray as rxr\nimport hvplot.xarray\nimport hvplot.pandas\nimport holoviews as hv\nimport geopandas as gp\nimport sys\nsys.path.append('../modules/')\nfrom emit_tools import emit_xarray\nLogin to your NASA Earthdata account and create a .netrc file using the login function from the earthaccess library. If you do not have an Earthdata Account, you can create one here.\nearthaccess.login(persist=True)\n\nEARTHDATA_USERNAME and EARTHDATA_PASSWORD are not set in the current environment, try setting them or use a different strategy (netrc, interactive)\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 07/08/2023\nUsing .netrc file for EDL\n\n\n&lt;earthaccess.auth.Auth at 0x172dcb9bf10&gt;\nFor this notebook we will download the files necessary using earthaccess. You can also access the data in place or stream it, but this can slow due to the file sizes. Provide a URL for an EMIT L2A Reflectance granule.\nurl = 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/EMITL2ARFL.001/EMIT_L2A_RFL_001_20220903T163129_2224611_012/EMIT_L2A_RFL_001_20220903T163129_2224611_012.nc'\nGet an HTTPS Session using your earthdata login, set a local path to save the file, and download the granule asset - This may take a while, the reflectance file is approximately 1.8 GB.\n# Get Https Session using Earthdata Login Info\nfs = earthaccess.get_fsspec_https_session()\n# Retrieve granule asset ID from URL (to maintain existing naming convention)\ngranule_asset_id = url.split('/')[-1]\n# Define Local Filepath\nfp = f'../../data/{granule_asset_id}'\n# Download the Granule Asset if it doesn't exist\nif not os.path.isfile(fp):\n    fs.download(url, fp)\nOpen the file downloaded and defined as fp. To do this, we will use the emit_xarray function from the emit_tools module. This module contains a few helpful functions that can be used with EMIT data.\nds = emit_xarray(fp, ortho=True)\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:           (latitude: 2009, longitude: 2353, wavelengths: 285)\nCoordinates:\n  * latitude          (latitude) float64 -39.31 -39.31 -39.31 ... -40.4 -40.4\n  * longitude         (longitude) float64 -62.51 -62.51 -62.51 ... -61.24 -61.24\n  * wavelengths       (wavelengths) float32 381.0 388.4 ... 2.486e+03 2.493e+03\n    good_wavelengths  (wavelengths) float32 1.0 1.0 1.0 1.0 ... 1.0 1.0 1.0 1.0\n    fwhm              (wavelengths) float32 8.415 8.415 8.415 ... 8.807 8.809\n    elev              (latitude, longitude) float32 nan nan nan ... nan nan nan\n    spatial_ref       int32 0\nData variables:\n    reflectance       (latitude, longitude, wavelengths) float32 nan nan ... nan\nAttributes: (12/40)\n    ncei_template_version:             NCEI_NetCDF_Swath_Template_v2.0\n    summary:                           The Earth Surface Mineral Dust Source ...\n    keywords:                          Imaging Spectroscopy, minerals, EMIT, ...\n    Conventions:                       CF-1.63\n    sensor:                            EMIT (Earth Surface Mineral Dust Sourc...\n    instrument:                        EMIT\n    ...                                ...\n    spatial_ref:                       GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHER...\n    geotransform:                      [-6.25120945e+01  5.42232520e-04 -0.00...\n    day_night_flag:                    Day\n    title:                             EMIT L2A Estimated Surface Reflectance...\n    granule_id:                        EMIT_L2A_RFL_001_20220903T163129_22246...\n    Orthorectified:                    Truexarray.DatasetDimensions:latitude: 2009longitude: 2353wavelengths: 285Coordinates: (7)latitude(latitude)float64-39.31 -39.31 ... -40.4 -40.4long_name :Latitude (WGS-84)units :degrees northarray([-39.30703 , -39.307572, -39.308115, ..., -40.394749, -40.395291,\n       -40.395833])longitude(longitude)float64-62.51 -62.51 ... -61.24 -61.24long_name :Longitude (WGS-84)units :degrees eastarray([-62.511823, -62.511281, -62.510739, ..., -61.237577, -61.237035,\n       -61.236493])wavelengths(wavelengths)float32381.0 388.4 ... 2.486e+03 2.493e+03long_name :Wavelength Centersunits :nmarray([ 381.00558,  388.4092 ,  395.81583, ..., 2478.153  , 2485.5386 ,\n       2492.9238 ], dtype=float32)good_wavelengths(wavelengths)float321.0 1.0 1.0 1.0 ... 1.0 1.0 1.0 1.0long_name :Wavelengths where reflectance is useable: 1 = good data, 0 = bad dataunits :unitlessarray([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)fwhm(wavelengths)float328.415 8.415 8.415 ... 8.807 8.809long_name :Full Width at Half Maxunits :nmarray([8.415, 8.415, 8.415, 8.415, 8.417, 8.418, 8.419, 8.421, 8.422,\n       8.424, 8.425, 8.426, 8.428, 8.429, 8.431, 8.432, 8.433, 8.435,\n       8.436, 8.438, 8.439, 8.44 , 8.442, 8.443, 8.445, 8.446, 8.447,\n       8.449, 8.45 , 8.452, 8.453, 8.454, 8.456, 8.457, 8.459, 8.46 ,\n       8.461, 8.463, 8.464, 8.466, 8.467, 8.468, 8.47 , 8.471, 8.473,\n       8.474, 8.475, 8.477, 8.478, 8.48 , 8.481, 8.482, 8.484, 8.485,\n       8.487, 8.488, 8.489, 8.491, 8.492, 8.494, 8.495, 8.496, 8.498,\n       8.499, 8.501, 8.502, 8.503, 8.505, 8.506, 8.508, 8.509, 8.51 ,\n       8.512, 8.513, 8.515, 8.516, 8.517, 8.519, 8.52 , 8.522, 8.523,\n       8.524, 8.526, 8.527, 8.529, 8.53 , 8.531, 8.533, 8.534, 8.536,\n       8.537, 8.538, 8.54 , 8.541, 8.543, 8.544, 8.545, 8.547, 8.548,\n       8.55 , 8.551, 8.552, 8.554, 8.555, 8.557, 8.558, 8.559, 8.561,\n       8.562, 8.564, 8.565, 8.566, 8.568, 8.569, 8.571, 8.572, 8.573,\n       8.575, 8.576, 8.578, 8.579, 8.58 , 8.582, 8.583, 8.585, 8.586,\n       8.587, 8.589, 8.59 , 8.592, 8.593, 8.594, 8.596, 8.597, 8.599,\n       8.6  , 8.601, 8.603, 8.604, 8.606, 8.607, 8.608, 8.61 , 8.611,\n       8.613, 8.614, 8.615, 8.617, 8.618, 8.62 , 8.621, 8.622, 8.624,\n       8.625, 8.627, 8.628, 8.629, 8.631, 8.632, 8.634, 8.635, 8.636,\n       8.638, 8.639, 8.641, 8.642, 8.643, 8.645, 8.646, 8.648, 8.649,\n       8.65 , 8.652, 8.653, 8.655, 8.656, 8.657, 8.659, 8.66 , 8.662,\n       8.663, 8.664, 8.666, 8.667, 8.669, 8.67 , 8.671, 8.673, 8.674,\n       8.676, 8.677, 8.678, 8.68 , 8.681, 8.683, 8.684, 8.685, 8.687,\n       8.688, 8.69 , 8.691, 8.692, 8.694, 8.695, 8.697, 8.698, 8.699,\n       8.701, 8.702, 8.704, 8.705, 8.706, 8.708, 8.709, 8.711, 8.712,\n       8.714, 8.715, 8.716, 8.718, 8.719, 8.721, 8.722, 8.723, 8.725,\n       8.726, 8.727, 8.729, 8.73 , 8.732, 8.733, 8.734, 8.736, 8.737,\n       8.739, 8.74 , 8.741, 8.743, 8.744, 8.746, 8.747, 8.748, 8.75 ,\n       8.751, 8.753, 8.754, 8.755, 8.757, 8.758, 8.76 , 8.761, 8.763,\n       8.764, 8.765, 8.767, 8.768, 8.77 , 8.771, 8.772, 8.774, 8.775,\n       8.777, 8.778, 8.779, 8.781, 8.782, 8.783, 8.785, 8.786, 8.788,\n       8.789, 8.79 , 8.792, 8.793, 8.795, 8.796, 8.797, 8.799, 8.8  ,\n       8.802, 8.803, 8.804, 8.806, 8.807, 8.809], dtype=float32)elev(latitude, longitude)float32nan nan nan nan ... nan nan nan nanlong_name :Surface Elevationunits :marray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]], dtype=float32)spatial_ref()int320crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]array(0)Data variables: (1)reflectance(latitude, longitude, wavelengths)float32nan nan nan nan ... nan nan nan nanlong_name :Surface Reflectanceunits :unitlessarray([[[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]],\n\n       [[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]],\n\n       [[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n...\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]],\n\n       [[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]],\n\n       [[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]]], dtype=float32)Indexes: (3)latitudePandasIndexPandasIndex(Index([ -39.30703026376183, -39.307572496282084, -39.308114728802344,\n         -39.3086569613226,  -39.30919919384286,  -39.30974142636311,\n        -39.31028365888337, -39.310825891403624, -39.311368123923884,\n        -39.31191035644414,\n       ...\n        -40.39095307175431, -40.391495304274564, -40.392037536794824,\n        -40.39257976931508,  -40.39312200183534,  -40.39366423435559,\n        -40.39420646687584, -40.394748699396104,  -40.39529093191636,\n        -40.39583316443662],\n      dtype='float64', name='latitude', length=2009))longitudePandasIndexPandasIndex(Index([ -62.51182341653617, -62.511281184015914, -62.510738951495654,\n         -62.5101967189754,  -62.50965448645514,  -62.50911225393489,\n        -62.50857002141463, -62.508027788894374, -62.507485556374114,\n        -62.50694332385386,\n       ...\n         -61.2413726215755,  -61.24083038905524,  -61.24028815653499,\n        -61.23974592401473, -61.239203691494474,  -61.23866145897422,\n        -61.23811922645396,  -61.23757699393371,  -61.23703476141345,\n       -61.236492528893194],\n      dtype='float64', name='longitude', length=2353))wavelengthsPandasIndexPandasIndex(Index([ 381.0055847167969,  388.4092102050781,  395.8158264160156,\n       403.22540283203125, 410.63800048828125,  418.0535888671875,\n        425.4721374511719,  432.8927001953125,  440.3172607421875,\n        447.7427978515625,\n       ...\n        2426.440185546875,  2433.830322265625,   2441.21826171875,\n          2448.6064453125,  2455.994384765625,  2463.381591796875,\n        2470.767822265625,  2478.153076171875,   2485.53857421875,\n           2492.923828125],\n      dtype='float32', name='wavelengths', length=285))Attributes: (40)ncei_template_version :NCEI_NetCDF_Swath_Template_v2.0summary :The Earth Surface Mineral Dust Source Investigation (EMIT) is an Earth Ventures-Instrument (EVI-4) Mission that maps the surface mineralogy of arid dust source regions via imaging spectroscopy in the visible and short-wave infrared (VSWIR). Installed on the International Space Station (ISS), the EMIT instrument is a Dyson imaging spectrometer that uses contiguous spectroscopic measurements from 410 to 2450 nm to resolve absoprtion features of iron oxides, clays, sulfates, carbonates, and other dust-forming minerals. During its one-year mission, EMIT will observe the sunlit Earth's dust source regions that occur within +/-52° latitude and produce maps of the source regions that can be used to improve forecasts of the role of mineral dust in the radiative forcing (warming or cooling) of the atmosphere.\\n\\nThis file contains L2A estimated surface reflectances and geolocation data. Reflectance estimates are created using an Optimal Estimation technique - see ATBD for details. Reflectance values are reported as fractions (relative to 1). Geolocation data (latitude, longitude, height) and a lookup table to project the data are also included.keywords :Imaging Spectroscopy, minerals, EMIT, dust, radiative forcingConventions :CF-1.63sensor :EMIT (Earth Surface Mineral Dust Source Investigation)instrument :EMITplatform :ISSinstitution :NASA Jet Propulsion Laboratory/California Institute of Technologylicense :https://science.nasa.gov/earth-science/earth-science-data/data-information-policy/naming_authority :LPDAACdate_created :2023-03-20T14:50:38Zkeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordsstdname_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventioncreator_name :Jet Propulsion Laboratory/California Institute of Technologycreator_url :https://earth.jpl.nasa.gov/emit/project :Earth Surface Mineral Dust Source Investigationproject_url :https://emit.jpl.nasa.gov/publisher_name :NASA LPDAACpublisher_url :https://lpdaac.usgs.govpublisher_email :lpdaac@usgs.govidentifier_product_doi_authority :https://doi.orgflight_line :emit20220903t163129_o24611_s000time_coverage_start :2022-09-03T16:31:29+0000time_coverage_end :2022-09-03T16:31:41+0000software_build_version :010603software_delivery_version :010610product_version :V001history :PGE Run Command: {python /beegfs/store/emit/ops/repos/emit-sds-l2a/spectrum_quality.py /tmp/emit/ops/emit20220903t163129_emit.L2AReflectance_20221111t160436/output/emit20220903t163129_rfl /tmp/emit/ops/emit20220903t163129_emit.L2AReflectance_20221111t160436/output/emit20220903t163129_rfl_quality.txt}, PGE Input Files: {radiance_file=/beegfs/store/emit/ops/data/acquisitions/20220903/emit20220903t163129/l1b/emit20220903t163129_o24611_s000_l1b_rdn_b0106_v01.img, pixel_locations_file=/beegfs/store/emit/ops/data/acquisitions/20220903/emit20220903t163129/l1b/emit20220903t163129_o24611_s000_l1b_loc_b0106_v01.img, observation_parameters_file=/beegfs/store/emit/ops/data/acquisitions/20220903/emit20220903t163129/l1b/emit20220903t163129_o24611_s000_l1b_obs_b0106_v01.img, surface_model_config=/beegfs/store/emit/ops/repos/emit-sds-l2a/surface/surface_20221020.json}crosstrack_orientation :as seen on groundeasternmost_longitude :-61.236221412633064northernmost_latitude :-39.3067591475017westernmost_longitude :-62.5120945327963southernmost_latitude :-40.39610428069674spatialResolution :0.000542232520256367spatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]geotransform :[-6.25120945e+01  5.42232520e-04 -0.00000000e+00 -3.93067591e+01\n -0.00000000e+00 -5.42232520e-04]day_night_flag :Daytitle :EMIT L2A Estimated Surface Reflectance 60 m V001granule_id :EMIT_L2A_RFL_001_20220903T163129_2224611_012Orthorectified :True\nUsing the read_file() function from geopandas, read in the .geojson file containing the polygon you wish to extract.\nshape = gp.read_file('../../data/isla_gaviota.geojson')\nshape\n\n\n\n\n\n\n\n\ngeometry\n\n\n\n\n0\nPOLYGON ((-62.14758 -39.88951, -62.16900 -39.8...\nNow plot the polygon we’ve loaded overlayed on a plot of the dataset.\nds.sel(wavelengths=800,method='nearest').hvplot.image(cmap='greys', frame_width=500, rasterize=True)*shape.hvplot(color='#d95f02',aspect='equal', alpha=0.5)\nUse the clip function from rasterio to clip the dataset to polygons from the geopandas.geodataframe. Setting all_touched to True will include pixels that intersected with the edges of the polygon.\nclipped = ds.rio.clip(shape.geometry.values,shape.crs, all_touched=True)\nclipped\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:           (latitude: 140, longitude: 164, wavelengths: 285)\nCoordinates:\n  * latitude          (latitude) float64 -39.88 -39.88 -39.88 ... -39.95 -39.95\n  * longitude         (longitude) float64 -62.2 -62.2 -62.2 ... -62.12 -62.12\n  * wavelengths       (wavelengths) float32 381.0 388.4 ... 2.486e+03 2.493e+03\n    good_wavelengths  (wavelengths) float32 1.0 1.0 1.0 1.0 ... 1.0 1.0 1.0 1.0\n    fwhm              (wavelengths) float32 8.415 8.415 8.415 ... 8.807 8.809\n    elev              (latitude, longitude) float32 12.89 12.89 ... 12.91 12.91\n    spatial_ref       int32 0\nData variables:\n    reflectance       (latitude, longitude, wavelengths) float32 nan nan ... nan\nAttributes: (12/40)\n    ncei_template_version:             NCEI_NetCDF_Swath_Template_v2.0\n    summary:                           The Earth Surface Mineral Dust Source ...\n    keywords:                          Imaging Spectroscopy, minerals, EMIT, ...\n    Conventions:                       CF-1.63\n    sensor:                            EMIT (Earth Surface Mineral Dust Sourc...\n    instrument:                        EMIT\n    ...                                ...\n    spatial_ref:                       GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHER...\n    geotransform:                      [-6.25120945e+01  5.42232520e-04 -0.00...\n    day_night_flag:                    Day\n    title:                             EMIT L2A Estimated Surface Reflectance...\n    granule_id:                        EMIT_L2A_RFL_001_20220903T163129_22246...\n    Orthorectified:                    Truexarray.DatasetDimensions:latitude: 140longitude: 164wavelengths: 285Coordinates: (7)latitude(latitude)float64-39.88 -39.88 ... -39.95 -39.95long_name :latitudeunits :degrees_northaxis :Ystandard_name :latitudearray([-39.876917, -39.877459, -39.878001, -39.878543, -39.879086, -39.879628,\n       -39.88017 , -39.880712, -39.881255, -39.881797, -39.882339, -39.882881,\n       -39.883423, -39.883966, -39.884508, -39.88505 , -39.885592, -39.886135,\n       -39.886677, -39.887219, -39.887761, -39.888304, -39.888846, -39.889388,\n       -39.88993 , -39.890472, -39.891015, -39.891557, -39.892099, -39.892641,\n       -39.893184, -39.893726, -39.894268, -39.89481 , -39.895353, -39.895895,\n       -39.896437, -39.896979, -39.897521, -39.898064, -39.898606, -39.899148,\n       -39.89969 , -39.900233, -39.900775, -39.901317, -39.901859, -39.902402,\n       -39.902944, -39.903486, -39.904028, -39.904571, -39.905113, -39.905655,\n       -39.906197, -39.906739, -39.907282, -39.907824, -39.908366, -39.908908,\n       -39.909451, -39.909993, -39.910535, -39.911077, -39.91162 , -39.912162,\n       -39.912704, -39.913246, -39.913788, -39.914331, -39.914873, -39.915415,\n       -39.915957, -39.9165  , -39.917042, -39.917584, -39.918126, -39.918669,\n       -39.919211, -39.919753, -39.920295, -39.920837, -39.92138 , -39.921922,\n       -39.922464, -39.923006, -39.923549, -39.924091, -39.924633, -39.925175,\n       -39.925718, -39.92626 , -39.926802, -39.927344, -39.927886, -39.928429,\n       -39.928971, -39.929513, -39.930055, -39.930598, -39.93114 , -39.931682,\n       -39.932224, -39.932767, -39.933309, -39.933851, -39.934393, -39.934936,\n       -39.935478, -39.93602 , -39.936562, -39.937104, -39.937647, -39.938189,\n       -39.938731, -39.939273, -39.939816, -39.940358, -39.9409  , -39.941442,\n       -39.941985, -39.942527, -39.943069, -39.943611, -39.944153, -39.944696,\n       -39.945238, -39.94578 , -39.946322, -39.946865, -39.947407, -39.947949,\n       -39.948491, -39.949034, -39.949576, -39.950118, -39.95066 , -39.951202,\n       -39.951745, -39.952287])longitude(longitude)float64-62.2 -62.2 -62.2 ... -62.12 -62.12long_name :longitudeunits :degrees_eastaxis :Xstandard_name :longitudearray([-62.204378, -62.203835, -62.203293, -62.202751, -62.202209, -62.201666,\n       -62.201124, -62.200582, -62.20004 , -62.199497, -62.198955, -62.198413,\n       -62.197871, -62.197329, -62.196786, -62.196244, -62.195702, -62.19516 ,\n       -62.194617, -62.194075, -62.193533, -62.192991, -62.192448, -62.191906,\n       -62.191364, -62.190822, -62.19028 , -62.189737, -62.189195, -62.188653,\n       -62.188111, -62.187568, -62.187026, -62.186484, -62.185942, -62.185399,\n       -62.184857, -62.184315, -62.183773, -62.183231, -62.182688, -62.182146,\n       -62.181604, -62.181062, -62.180519, -62.179977, -62.179435, -62.178893,\n       -62.17835 , -62.177808, -62.177266, -62.176724, -62.176181, -62.175639,\n       -62.175097, -62.174555, -62.174013, -62.17347 , -62.172928, -62.172386,\n       -62.171844, -62.171301, -62.170759, -62.170217, -62.169675, -62.169132,\n       -62.16859 , -62.168048, -62.167506, -62.166964, -62.166421, -62.165879,\n       -62.165337, -62.164795, -62.164252, -62.16371 , -62.163168, -62.162626,\n       -62.162083, -62.161541, -62.160999, -62.160457, -62.159915, -62.159372,\n       -62.15883 , -62.158288, -62.157746, -62.157203, -62.156661, -62.156119,\n       -62.155577, -62.155034, -62.154492, -62.15395 , -62.153408, -62.152865,\n       -62.152323, -62.151781, -62.151239, -62.150697, -62.150154, -62.149612,\n       -62.14907 , -62.148528, -62.147985, -62.147443, -62.146901, -62.146359,\n       -62.145816, -62.145274, -62.144732, -62.14419 , -62.143648, -62.143105,\n       -62.142563, -62.142021, -62.141479, -62.140936, -62.140394, -62.139852,\n       -62.13931 , -62.138767, -62.138225, -62.137683, -62.137141, -62.136599,\n       -62.136056, -62.135514, -62.134972, -62.13443 , -62.133887, -62.133345,\n       -62.132803, -62.132261, -62.131718, -62.131176, -62.130634, -62.130092,\n       -62.129549, -62.129007, -62.128465, -62.127923, -62.127381, -62.126838,\n       -62.126296, -62.125754, -62.125212, -62.124669, -62.124127, -62.123585,\n       -62.123043, -62.1225  , -62.121958, -62.121416, -62.120874, -62.120332,\n       -62.119789, -62.119247, -62.118705, -62.118163, -62.11762 , -62.117078,\n       -62.116536, -62.115994])wavelengths(wavelengths)float32381.0 388.4 ... 2.486e+03 2.493e+03long_name :Wavelength Centersunits :nmarray([ 381.00558,  388.4092 ,  395.81583, ..., 2478.153  , 2485.5386 ,\n       2492.9238 ], dtype=float32)good_wavelengths(wavelengths)float321.0 1.0 1.0 1.0 ... 1.0 1.0 1.0 1.0long_name :Wavelengths where reflectance is useable: 1 = good data, 0 = bad dataunits :unitlessarray([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)fwhm(wavelengths)float328.415 8.415 8.415 ... 8.807 8.809long_name :Full Width at Half Maxunits :nmarray([8.415, 8.415, 8.415, 8.415, 8.417, 8.418, 8.419, 8.421, 8.422,\n       8.424, 8.425, 8.426, 8.428, 8.429, 8.431, 8.432, 8.433, 8.435,\n       8.436, 8.438, 8.439, 8.44 , 8.442, 8.443, 8.445, 8.446, 8.447,\n       8.449, 8.45 , 8.452, 8.453, 8.454, 8.456, 8.457, 8.459, 8.46 ,\n       8.461, 8.463, 8.464, 8.466, 8.467, 8.468, 8.47 , 8.471, 8.473,\n       8.474, 8.475, 8.477, 8.478, 8.48 , 8.481, 8.482, 8.484, 8.485,\n       8.487, 8.488, 8.489, 8.491, 8.492, 8.494, 8.495, 8.496, 8.498,\n       8.499, 8.501, 8.502, 8.503, 8.505, 8.506, 8.508, 8.509, 8.51 ,\n       8.512, 8.513, 8.515, 8.516, 8.517, 8.519, 8.52 , 8.522, 8.523,\n       8.524, 8.526, 8.527, 8.529, 8.53 , 8.531, 8.533, 8.534, 8.536,\n       8.537, 8.538, 8.54 , 8.541, 8.543, 8.544, 8.545, 8.547, 8.548,\n       8.55 , 8.551, 8.552, 8.554, 8.555, 8.557, 8.558, 8.559, 8.561,\n       8.562, 8.564, 8.565, 8.566, 8.568, 8.569, 8.571, 8.572, 8.573,\n       8.575, 8.576, 8.578, 8.579, 8.58 , 8.582, 8.583, 8.585, 8.586,\n       8.587, 8.589, 8.59 , 8.592, 8.593, 8.594, 8.596, 8.597, 8.599,\n       8.6  , 8.601, 8.603, 8.604, 8.606, 8.607, 8.608, 8.61 , 8.611,\n       8.613, 8.614, 8.615, 8.617, 8.618, 8.62 , 8.621, 8.622, 8.624,\n       8.625, 8.627, 8.628, 8.629, 8.631, 8.632, 8.634, 8.635, 8.636,\n       8.638, 8.639, 8.641, 8.642, 8.643, 8.645, 8.646, 8.648, 8.649,\n       8.65 , 8.652, 8.653, 8.655, 8.656, 8.657, 8.659, 8.66 , 8.662,\n       8.663, 8.664, 8.666, 8.667, 8.669, 8.67 , 8.671, 8.673, 8.674,\n       8.676, 8.677, 8.678, 8.68 , 8.681, 8.683, 8.684, 8.685, 8.687,\n       8.688, 8.69 , 8.691, 8.692, 8.694, 8.695, 8.697, 8.698, 8.699,\n       8.701, 8.702, 8.704, 8.705, 8.706, 8.708, 8.709, 8.711, 8.712,\n       8.714, 8.715, 8.716, 8.718, 8.719, 8.721, 8.722, 8.723, 8.725,\n       8.726, 8.727, 8.729, 8.73 , 8.732, 8.733, 8.734, 8.736, 8.737,\n       8.739, 8.74 , 8.741, 8.743, 8.744, 8.746, 8.747, 8.748, 8.75 ,\n       8.751, 8.753, 8.754, 8.755, 8.757, 8.758, 8.76 , 8.761, 8.763,\n       8.764, 8.765, 8.767, 8.768, 8.77 , 8.771, 8.772, 8.774, 8.775,\n       8.777, 8.778, 8.779, 8.781, 8.782, 8.783, 8.785, 8.786, 8.788,\n       8.789, 8.79 , 8.792, 8.793, 8.795, 8.796, 8.797, 8.799, 8.8  ,\n       8.802, 8.803, 8.804, 8.806, 8.807, 8.809], dtype=float32)elev(latitude, longitude)float3212.89 12.89 12.89 ... 12.91 12.91long_name :Surface Elevationunits :marray([[12.886979 , 12.887033 , 12.887033 , ..., 12.942823 , 12.943371 ,\n        12.943524 ],\n       [12.886595 , 12.886595 , 12.887089 , ..., 12.942275 , 12.942979 ,\n        12.943135 ],\n       [12.886155 , 12.886652 , 12.886652 , ..., 12.9424305, 12.9424305,\n        12.943135 ],\n       ...,\n       [12.851372 , 12.851372 , 12.852035 , ..., 12.910116 , 12.910548 ,\n        12.910947 ],\n       [12.850919 , 12.851129 , 12.851582 , ..., 12.909685 , 12.910515 ,\n        12.910947 ],\n       [12.850676 , 12.850676 , 12.851338 , ..., 12.910084 , 12.910084 ,\n        12.910913 ]], dtype=float32)spatial_ref()int320crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :-62.20464869381094 0.0005422325202563636 0.0 -39.87664552629114 0.0 -0.0005422325202563658array(0)Data variables: (1)reflectance(latitude, longitude, wavelengths)float32nan nan nan nan ... nan nan nan nanlong_name :Surface Reflectanceunits :unitlessarray([[[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]],\n\n       [[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]],\n\n       [[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n...\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]],\n\n       [[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]],\n\n       [[nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        ...,\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan],\n        [nan, nan, nan, ..., nan, nan, nan]]], dtype=float32)Indexes: (3)latitudePandasIndexPandasIndex(Index([ -39.87691664255127,  -39.87745887507153, -39.878001107591786,\n        -39.87854334011204,   -39.8790855726323,  -39.87962780515255,\n        -39.88017003767281, -39.880712270193065, -39.881254502713325,\n        -39.88179673523358,\n       ...\n         -39.9474068701846, -39.947949102704854, -39.948491335225114,\n        -39.94903356774537,  -39.94957580026563,  -39.95011803278588,\n        -39.95066026530614, -39.951202497826394, -39.951744730346654,\n        -39.95228696286691],\n      dtype='float64', name='latitude', length=140))longitudePandasIndexPandasIndex(Index([ -62.20437757755081,  -62.20383534503055, -62.203293112510295,\n       -62.202750879990035,  -62.20220864746978,  -62.20166641494953,\n        -62.20112418242927, -62.200581949909015, -62.200039717388755,\n         -62.1994974848685,\n       ...\n        -62.12087376943133,  -62.12033153691107, -62.119789304390814,\n        -62.11924707187056,   -62.1187048393503,  -62.11816260683005,\n        -62.11762037430979, -62.117078141789534, -62.116535909269274,\n        -62.11599367674902],\n      dtype='float64', name='longitude', length=164))wavelengthsPandasIndexPandasIndex(Index([ 381.0055847167969,  388.4092102050781,  395.8158264160156,\n       403.22540283203125, 410.63800048828125,  418.0535888671875,\n        425.4721374511719,  432.8927001953125,  440.3172607421875,\n        447.7427978515625,\n       ...\n        2426.440185546875,  2433.830322265625,   2441.21826171875,\n          2448.6064453125,  2455.994384765625,  2463.381591796875,\n        2470.767822265625,  2478.153076171875,   2485.53857421875,\n           2492.923828125],\n      dtype='float32', name='wavelengths', length=285))Attributes: (40)ncei_template_version :NCEI_NetCDF_Swath_Template_v2.0summary :The Earth Surface Mineral Dust Source Investigation (EMIT) is an Earth Ventures-Instrument (EVI-4) Mission that maps the surface mineralogy of arid dust source regions via imaging spectroscopy in the visible and short-wave infrared (VSWIR). Installed on the International Space Station (ISS), the EMIT instrument is a Dyson imaging spectrometer that uses contiguous spectroscopic measurements from 410 to 2450 nm to resolve absoprtion features of iron oxides, clays, sulfates, carbonates, and other dust-forming minerals. During its one-year mission, EMIT will observe the sunlit Earth's dust source regions that occur within +/-52° latitude and produce maps of the source regions that can be used to improve forecasts of the role of mineral dust in the radiative forcing (warming or cooling) of the atmosphere.\\n\\nThis file contains L2A estimated surface reflectances and geolocation data. Reflectance estimates are created using an Optimal Estimation technique - see ATBD for details. Reflectance values are reported as fractions (relative to 1). Geolocation data (latitude, longitude, height) and a lookup table to project the data are also included.keywords :Imaging Spectroscopy, minerals, EMIT, dust, radiative forcingConventions :CF-1.63sensor :EMIT (Earth Surface Mineral Dust Source Investigation)instrument :EMITplatform :ISSinstitution :NASA Jet Propulsion Laboratory/California Institute of Technologylicense :https://science.nasa.gov/earth-science/earth-science-data/data-information-policy/naming_authority :LPDAACdate_created :2023-03-20T14:50:38Zkeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordsstdname_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventioncreator_name :Jet Propulsion Laboratory/California Institute of Technologycreator_url :https://earth.jpl.nasa.gov/emit/project :Earth Surface Mineral Dust Source Investigationproject_url :https://emit.jpl.nasa.gov/publisher_name :NASA LPDAACpublisher_url :https://lpdaac.usgs.govpublisher_email :lpdaac@usgs.govidentifier_product_doi_authority :https://doi.orgflight_line :emit20220903t163129_o24611_s000time_coverage_start :2022-09-03T16:31:29+0000time_coverage_end :2022-09-03T16:31:41+0000software_build_version :010603software_delivery_version :010610product_version :V001history :PGE Run Command: {python /beegfs/store/emit/ops/repos/emit-sds-l2a/spectrum_quality.py /tmp/emit/ops/emit20220903t163129_emit.L2AReflectance_20221111t160436/output/emit20220903t163129_rfl /tmp/emit/ops/emit20220903t163129_emit.L2AReflectance_20221111t160436/output/emit20220903t163129_rfl_quality.txt}, PGE Input Files: {radiance_file=/beegfs/store/emit/ops/data/acquisitions/20220903/emit20220903t163129/l1b/emit20220903t163129_o24611_s000_l1b_rdn_b0106_v01.img, pixel_locations_file=/beegfs/store/emit/ops/data/acquisitions/20220903/emit20220903t163129/l1b/emit20220903t163129_o24611_s000_l1b_loc_b0106_v01.img, observation_parameters_file=/beegfs/store/emit/ops/data/acquisitions/20220903/emit20220903t163129/l1b/emit20220903t163129_o24611_s000_l1b_obs_b0106_v01.img, surface_model_config=/beegfs/store/emit/ops/repos/emit-sds-l2a/surface/surface_20221020.json}crosstrack_orientation :as seen on groundeasternmost_longitude :-61.236221412633064northernmost_latitude :-39.3067591475017westernmost_longitude :-62.5120945327963southernmost_latitude :-40.39610428069674spatialResolution :0.000542232520256367spatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]geotransform :[-6.25120945e+01  5.42232520e-04 -0.00000000e+00 -3.93067591e+01\n -0.00000000e+00 -5.42232520e-04]day_night_flag :Daytitle :EMIT L2A Estimated Surface Reflectance 60 m V001granule_id :EMIT_L2A_RFL_001_20220903T163129_2224611_012Orthorectified :True\nTo view the clipped image, select a band from the clipped dataset and plot it spatially.\nclipped.sel(wavelengths=800,method='nearest').hvplot.image(cmap='viridis', aspect = 'equal', frame_width=500, rasterize=True)\nNow we can save the clipped xarray.Dataset as a netCDF4 output that can be reopened using the xarray.open_dataset function.\nclipped.to_netcdf('../../data/clipped_data.nc')\n# Example for Opening \n#ds = xr.open_dataset('../../data/clipped_data.nc')"
  },
  {
    "objectID": "how-tos/How_to_Extract_Area.html#contact-info",
    "href": "how-tos/How_to_Extract_Area.html#contact-info",
    "title": "How to: Extracting EMIT Spectra using a Shapefile/GeoJSON",
    "section": "Contact Info:",
    "text": "Contact Info:\nEmail: LPDAAC@usgs.gov\nVoice: +1-866-573-3222\nOrganization: Land Processes Distributed Active Archive Center (LP DAAC)¹\nWebsite: https://lpdaac.usgs.gov/\nDate last modified: 06-30-2023\n¹Work performed under USGS contract G15PD00467 for NASA contract NNG14HH33I."
  },
  {
    "objectID": "how-tos/How_to_Direct_S3_Access.html",
    "href": "how-tos/How_to_Direct_S3_Access.html",
    "title": "How to: Use Direct S3 Access to work with EMIT Data",
    "section": "",
    "text": "Summary\nEMIT datasets are available through NASA’s Earthdata Cloud. NASA Earthdata on Cloud is always free and accessible via either HTTPS or direct S3 bucket access. With direct S3 access, you can bring your “code to the data”, making your processing faster and scalable. Direct S3 access to NASA Earthdata on Cloud is only available if your Amazon Web Services (AWS) instance is set up in the us-west-2 region. This notebook explains how to utilize direct S3 access to EMIT data.\nRequirements\nLearning Objectives\n+ How to use Direct S3 Access to EMIT Data + How to add this functionality to any notebook from this repository\nImport the required packages.\n# Import Packages\nimport os\nimport sys\nimport requests\nimport s3fs\nimport netCDF4 as nc\nfrom osgeo import gdal\nimport numpy as np\nimport xarray as xr\nimport hvplot.xarray\nimport holoviews as hv\nimport earthaccess\nsys.path.append('../modules/')\nfrom emit_tools import emit_xarray"
  },
  {
    "objectID": "how-tos/How_to_Direct_S3_Access.html#overview-of-s3-access",
    "href": "how-tos/How_to_Direct_S3_Access.html#overview-of-s3-access",
    "title": "How to: Use Direct S3 Access to work with EMIT Data",
    "section": "Overview of s3 Access",
    "text": "Overview of s3 Access\nNASA Earthdata Cloud data in S3 can be directly accessed via temporary credentials; this access is limited to requests made within the US West (Oregon) (code: us-west-2) AWS region. Direct S3 access is achieved by passing NASA supplied temporary credentials (token) to AWS so we can interact with S3 objects from applicable Earthdata Cloud buckets. Your NASA Earthdata login credentials can easily be managed using the earthaccess library. We can create the necessary .netrc file that stores the Earthdata Login credentials locally with the following code cell. Enter your username and password if prompted, these will be used to sign into NASA Earthdata and retrieve the necessary temporary credentials allowing you to utilize s3 access.\n\n# The persist option creates and stores your username and password in a .netrc file\nearthaccess.login(persist=True)\n\nFor now, each NASA DAAC has different AWS credentials endpoints. Below are some of the credential endpoints to various DAACs:\n\ns3_cred_endpoint = {\n    'podaac':'https://archive.podaac.earthdata.nasa.gov/s3credentials',\n    'gesdisc': 'https://data.gesdisc.earthdata.nasa.gov/s3credentials',\n    'lpdaac':'https://data.lpdaac.earthdatacloud.nasa.gov/s3credentials',\n    'ornldaac': 'https://data.ornldaac.earthdata.nasa.gov/s3credentials',\n    'ghrcdaac': 'https://data.ghrc.earthdata.nasa.gov/s3credentials'\n}\ns3_cred_endpoint\n\nCreate a function to make a request to an endpoint for temporary credentials. Remember, each DAAC has their own endpoint and credentials are not usable for cloud data from other DAACs.\n\n# Define Function \ndef get_temp_creds(provider):\n    return requests.get(s3_cred_endpoint[provider]).json()\n\n\n# Get Credentials\ntemp_creds_req = get_temp_creds('lpdaac')\n#temp_creds_req\n\n\nSet up an s3fs Session for Direct Access\ns3fs sessions are used for authenticated access to s3 bucket and allows for typical file-system style operations. Below we create session by passing in the temporary credentials we recieved from our temporary credentials endpoint.\n\n# Pass Authentication to s3fs\nfs_s3 = s3fs.S3FileSystem(anon=False, \n                          key=temp_creds_req['accessKeyId'], \n                          secret=temp_creds_req['secretAccessKey'], \n                          token=temp_creds_req['sessionToken'])\n\nBelow we specify the s3 URL to the data asset in Earthdata Cloud. This URL can be found via Earthdata Search or programmatically through the CMR and CMR-STAC APIs.\n\n# Define S3 URL                          \ns3_url = 's3://lp-prod-protected/EMITL2ARFL.001/EMIT_L2A_RFL_001_20220903T163129_2224611_012/EMIT_L2A_RFL_001_20220903T163129_2224611_012.nc'\n\nOpen with the netCDF file using the s3fs package, then load the cloud asset into an xarray dataset, or use directly with emit_xarray function from emit_tools.\n\n# Open s3 url\nfp = fs_s3.open(s3_url, mode='rb')\n# Open dataset with xarray\nds = xr.open_dataset(fp) #Note this only opens the root group (reflectance)\nds\n\n\n# Open and Orthorectify\nds = emit_xarray(fp, ortho=True)\nds\n\n\n#Plot Spatially\nds.sel(wavelengths=650, method='nearest').hvplot.image(cmap='viridis', aspect = 'equal', frame_width=500, rasterize=True)\n\n\n#Plot Spectra at a Location\nds.sel(longitude=-61.833,latitude=-39.710,method='nearest').hvplot.line(y='reflectance',x='wavelengths', color='black', frame_width=400)"
  },
  {
    "objectID": "how-tos/How_to_Direct_S3_Access.html#s3-access-for-any-notebook-in-this-repository",
    "href": "how-tos/How_to_Direct_S3_Access.html#s3-access-for-any-notebook-in-this-repository",
    "title": "How to: Use Direct S3 Access to work with EMIT Data",
    "section": "S3 Access for any Notebook in this Repository",
    "text": "S3 Access for any Notebook in this Repository\nAdd the two code blocks below to any how-to or tutorial notebook, by replacing the block that sets the local filepath(s) as fp with the two blocks below. The first block imports the additional packages required and retrieves temporary s3 credentials. The second uses s3fs to open the desired s3 URL and create an object readable by xarray.\n\nimport requests\nimport s3fs\nimport earthaccess\n\n# Use Earthaccess to Manage NASA Earthdata Credentials and create .netrc if necessary\nearthaccess.login(persist=True)\n\n# Get Temporary Credentials/Token\ntemp_creds_req = requests.get('https://data.lpdaac.earthdatacloud.nasa.gov/s3credentials').json() # use lpdaac credential endpoint for EMIT data\n\n# Create s3fs session\nfs_s3 = s3fs.S3FileSystem(anon=False, \n                          key=temp_creds_req['accessKeyId'], \n                          secret=temp_creds_req['secretAccessKey'], \n                          token=temp_creds_req['sessionToken'])\n\n\n# Set s3 url and open\ns3_url = 's3://lp-prod-protected/EMITL2ARFL.001/EMIT_L2A_RFL_001_20220903T163129_2224611_012/EMIT_L2A_RFL_001_20220903T163129_2224611_012.nc' # S3 URL to L2A Reflectance File used throughout tutorial\n#s3_url_mask = 's3://lp-prod-protected/EMITL2ARFL.001/EMIT_L2A_RFL_001_20220903T163129_2224611_012/EMIT_L2A_MASK_001_20220903T163129_2224611_012.nc' # Only used for Quality How-to\nfp = fs_s3.open(s3_url, mode='rb')\n\nNow you should be able to proceed as normal through the other Jupyter notebooks at the step opening the file with emit_xarray from the emit_tools module or xarray.open_dataset depending on the notebook."
  },
  {
    "objectID": "how-tos/How_to_Direct_S3_Access.html#contact-info",
    "href": "how-tos/How_to_Direct_S3_Access.html#contact-info",
    "title": "How to: Use Direct S3 Access to work with EMIT Data",
    "section": "Contact Info:",
    "text": "Contact Info:\nEmail: LPDAAC@usgs.gov\nVoice: +1-866-573-3222\nOrganization: Land Processes Distributed Active Archive Center (LP DAAC)¹\nWebsite: https://lpdaac.usgs.gov/\nDate last modified: 08-03-2023\n¹Work performed under USGS contract G15PD00467 for NASA contract NNG14HH33I."
  },
  {
    "objectID": "tutorials/Exploring_EMIT_L2A_Reflectance.html",
    "href": "tutorials/Exploring_EMIT_L2A_Reflectance.html",
    "title": "Exploring L2A Reflectance",
    "section": "",
    "text": "Summary\nIn this notebook we will open a Level 2A (L2A) Reflectance product file (netcdf) from Earth Surface Minteral Dust Source Investigation (EMIT). We will inspect the structure and plot the spectra of individual pixels and spatial coverage of a single band. Next, we will orthorectify the imagery using the included geometry lookup table (GLT). Finally, we will take advantage of the holoviews streams module to build an interactive plot.\nBackground\nThe EMIT instrument is an imaging spectrometer that measures light in visible and infrared wavelengths. These measurements display unique spectral signatures that correspond to the composition on the Earth’s surface. The EMIT mission focuses specifically on mapping the composition of minerals to better understand the effects of mineral dust throughout the Earth system and human populations now and in the future. More details about EMIT and its associated products can be found in the README.md and on the EMIT website.\nThe L2A Reflectance Product contains estimated surface reflectance. Surface reflectance is the fraction of incoming solar radiation reflected Earth’s surface. Materials reflect proportions of radiation differently based upon their chemical composition. This means that reflectance information can be used to determine the composition of a target. In this guide you will learn how to plot a band from the L2A reflectance spatially and look at the spectral curve associated with individual pixels.\nRequirements - Set up Python Environment - See setup_instructions.md in the /setup/ folder\nLearning Objectives\n- How to open an EMIT .nc file as an xarray.Dataset - Apply the Geometry Lookup Table (GLT) to orthorectify the image. - How to plot the spectra of pixels - How to plot specific bands as images - How to make an interactive plot to visualize spectra\nTutorial Outline\n1.1 Setup\n1.2 Opening The Data\n1.3 Plotting Data - Non-Orthorectified\n1.4 Orthorectification\n1.5 Plotting Data - Orthorectified\n1.6 Saving Orthorectified Data\n1.7 Interactive Plots"
  },
  {
    "objectID": "tutorials/Exploring_EMIT_L2A_Reflectance.html#setup",
    "href": "tutorials/Exploring_EMIT_L2A_Reflectance.html#setup",
    "title": "Exploring L2A Reflectance",
    "section": "1.1 Setup",
    "text": "1.1 Setup\nImport the required Python libraries.\n\nimport earthaccess\nimport os\nfrom osgeo import gdal\nimport numpy as np\nimport math\nimport rasterio as rio\nimport xarray as xr\nimport holoviews as hv\nimport hvplot.xarray\nimport netCDF4 as nc\n\nLogin to your NASA Earthdata account and create a .netrc file using the login function from the earthaccess library. If you do not have an Earthdata Account, you can create one here.\n\nearthaccess.login(persist=True)\n\nFor this notebook we will download the files necessary using earthaccess. You can also access the data in place or stream it, but this can slow due to the file sizes. Provide a URL for an EMIT L2A Reflectance granule.\n\nurl = 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/EMITL2ARFL.001/EMIT_L2A_RFL_001_20220903T163129_2224611_012/EMIT_L2A_RFL_001_20220903T163129_2224611_012.nc'\n\nGet an HTTPS Session using your earthdata login, set a local path to save the file, and download the granule asset - This may take a while, the reflectance file is approximately 1.8 GB.\n\n# Get Https Session using Earthdata Login Info\nfs = earthaccess.get_fsspec_https_session()\n# Retrieve granule asset ID from URL (to maintain existing naming convention)\ngranule_asset_id = url.split('/')[-1]\n# Define Local Filepath\nfp = f'../../data/{granule_asset_id}'\n# Download the Granule Asset if it doesn't exist\nif not os.path.isfile(fp):\n    fs.download(url, fp)"
  },
  {
    "objectID": "tutorials/Exploring_EMIT_L2A_Reflectance.html#opening-emit-data",
    "href": "tutorials/Exploring_EMIT_L2A_Reflectance.html#opening-emit-data",
    "title": "Exploring L2A Reflectance",
    "section": "1.2 Opening EMIT Data",
    "text": "1.2 Opening EMIT Data\nEMIT L2A Reflectance Data are distributed in a non-orthocorrected spatially raw NetCDF4 (.nc) format consisting of the data and its associated metadata. Inside the L2A Reflectance .nc file there are 3 groups. Groups can be thought of as containers to organize the data.\n\nThe root group that can be considered the main dataset contains the reflectance data described by the downtrack, crosstrack, and bands dimensions.\n\nThe sensor_band_parameters group containing the wavelength center and the full-width half maximum (FWHM) of each band.\n\nThe location group contains latitude and longitude values at the center of each pixel described by the crosstrack and downtrack dimensions, as well as a geometry lookup table (GLT) described by the ortho_x and ortho_y dimensions. The GLT is an orthorectified image (EPSG:4326) consisting of 2 layers containing downtrack and crosstrack indices. These index positions allow us to quickly project the raw data onto this geographic grid.\n\nTo access the .nc file we will use the netCDF4 and xarray libraries. The netCDF4 library will be used to explore thee data structure, then we will use xarray to work with the data. xarray is a python package for working with labelled multi-dimensional arrays. It provides a data model where data, dimensions, and attributes together in an easily interpretable way.\n\nds_nc = nc.Dataset(fp)\nds_nc\n\nFrom this output, we can see the reflectance variable, and the sensor_band_parameters and location groups. We can also see the dimensions, their sizes, and file metadata.\nNow that we have a better understanding of the structure of the file, read the EMIT data as an xarray.Dataset and preview it.\n\nds = xr.open_dataset(fp)\nds\n\nThis xarray dataset only contains the reflectance variable and attributes metadata, not the data from the other groups in the file. This is because xarray only supports reading non-hierarchical (flat) datasets, meaning that when loading a NetCDF into an xarray.Dataset, only the root group is added. The other groups will have to be read into xarray separately. We can list them using the netCDF4 library to get the group names, then use that to add them to new xarray datasets.\n\nds_nc.groups.keys()\n\nNow that we know the other group names, read the sensor_band_parameters and location groups into their own xarray datasets.\n\nwvl = xr.open_dataset(fp,group='sensor_band_parameters')\nwvl\n\n\nloc = xr.open_dataset(fp,group='location')\nloc\n\nWe could merge all 3 datasets, but since sensor_band_parameters and location describe various aspects of the reflectance variable we can simply add them as coordinates, along with a downtrack and crosstrack dimension to describe the reflectance data array. This will allow us to utilize some additional features of xarray.\n\n# Create coordinates and an index for the downtrack and crosstrack dimensions, then unpack the variables from the wvl and loc datasets and set them as coordinates for ds\nds = ds.assign_coords({'downtrack':(['downtrack'], ds.downtrack.data),'crosstrack':(['crosstrack'],ds.crosstrack.data), **wvl.variables, **loc.variables})\nds\n\nAnother step we can take is to swap the ‘bands’ dimension with wavelengths. Doing this will allow us to index based on the wavelength of the band, and remove ‘bands’ as a dimension. We can do this since bands is just a 3rd dimension that will is defined based on the ‘sensor_band_parameters’ group (i.e. ‘wavelengths’ for reflectance, or ‘mask_bands’ for mask data).\n\nds = ds.swap_dims({'bands':'wavelengths'})\nds\n\nNow we have an xarray.Dataset containing all of the information from EMIT netCDF file. Since these datasets are large, we can go ahead and delete objects we won’t be using to conserve memory.\n\ndel wvl\ndel loc"
  },
  {
    "objectID": "tutorials/Exploring_EMIT_L2A_Reflectance.html#visualizing-spectra---non-orthorectified",
    "href": "tutorials/Exploring_EMIT_L2A_Reflectance.html#visualizing-spectra---non-orthorectified",
    "title": "Exploring L2A Reflectance",
    "section": "1.3 Visualizing Spectra - Non-Orthorectified",
    "text": "1.3 Visualizing Spectra - Non-Orthorectified\nPick a random downtrack and crosstrack location. Here we chose 660, 370 (downtrack,crosstrack). Next use the sel() function from xarray and the hvplot.line() functions to first select the spatial position and then plot a line showing the reflectance at that location.\n\nexample = ds['reflectance'].sel(downtrack=660,crosstrack=370)\nexample.hvplot.line(y='reflectance',x='wavelengths', color='black')\n\nWe can see some flat regions in the spectral curve around 1320-1440 nm and 1770-1970 nm. These are where water absoption features in these regions were removed. Typically this data is noisy due to the moisture present in the atmosphere; therefore, these spectral regions offer little information about targets and can be excluded from calculations.\nWe can set reflectance values where the good_wavelenghts is 0 (these will have a reflectance of -0.1) to np.nan do mask them out and improve visualization.\n\nds['reflectance'].data[:,:,ds['good_wavelengths'].data==0] = np.nan\n\nPlot the filtered reflectance values using the same downtrack and crosstrack position as above.\n\nds['reflectance'].sel(downtrack=660,crosstrack=370).hvplot.line(y='reflectance',x='wavelengths', color='black')\n\nWithout these data we can better interpret the spectral curve and hvplot will do a better job automatically scaling our axes.\nWe can also plot the data spatially. Since we changed our dimension and index to wavelengths we can use the sel() function to spectrally subset to the wavelength nearest to 850nm in the NIR, then plot the data spatially using hvplot.image() to view the reflectance at 850nm of each pixel across the acquired region.\n\nrefl850 = ds.sel(wavelengths=850, method='nearest')\n\n\nrefl850.hvplot.image(cmap='viridis', aspect = 'equal', rasterize=True)"
  },
  {
    "objectID": "tutorials/Exploring_EMIT_L2A_Reflectance.html#orthorectification",
    "href": "tutorials/Exploring_EMIT_L2A_Reflectance.html#orthorectification",
    "title": "Exploring L2A Reflectance",
    "section": "1.4 Orthorectification",
    "text": "1.4 Orthorectification\nThe ‘real’ orthorectifation process has already been done for EMIT data. Here we are using the crosstrack and downtrack indices contained in the GLT to place our spatially raw reflectance data a into geographic grid with the ortho_x and ortho_y dimensions. As previously mentioned a Geometry Lookup Table (GLT) is included in the location group of the netCDF4 file. Applying the GLT will orthorectify the data and give us Latitude and Longitude positional information.\nBefore using the GLT to orthorectify the data, examine the location group from the dataset by reading it into xarray.\n\nloc = xr.open_dataset(fp,group='location')\nloc\n\nWe can see that each downtrack and crosstrack position has a latitude, longitude, and elevation, and the ortho_x and ortho_y data make up glt_x and glt_y arrays with a different shape. These arrays contain crosstrack and downtrack index values to quickly reproject the data. We will use these indexes to build an array of 2009x2353x285 (lat,lon,bands), filling it with the data from the reflectance dataset.\nGo ahead and remove this dataset. We will use a function in the provided emit_tools module to orthorectify the data and place it into an xarray.Dataset.\n\ndel loc\ndel example\n\nImport the emit_tools module and call use the help function to see how it can be used.\n\nNote: This function currently works with L1B Radiance and L2A Reflectance Data.\n\n\nimport sys\nsys.path.append('../modules/')\nfrom emit_tools import emit_xarray\nhelp(emit_xarray)\n\nWe can see that the emit_xarray function will automatically apply the GLT to orthorectify the data unless ortho  = False. The function will also apply masks if desired during construction of the output xarray.Dataset. EMIT L2A Masks files provides a quality mask and a band_mask indicating if values were interpolated. For more about masking, see the How_to_use_EMIT_Quality_data.ipynb.\nUse the emit_xarray function to read in and orthorectify the L2A reflectance data.\n\nFor a detailed walkthrough of the orthorectification process using the GLT see section 2 of the How_to_Orthorectify.ipynb in the how-tos folder.\n\n\nds_geo = emit_xarray(fp, ortho=True)\nds_geo"
  },
  {
    "objectID": "tutorials/Exploring_EMIT_L2A_Reflectance.html#plotting-data---orthorectified",
    "href": "tutorials/Exploring_EMIT_L2A_Reflectance.html#plotting-data---orthorectified",
    "title": "Exploring L2A Reflectance",
    "section": "1.5 Plotting Data - Orthorectified",
    "text": "1.5 Plotting Data - Orthorectified\nNow that the data has been orthorectified, plot the georeferenced dataset using the same single wavelength (850nm) as above. We can use the aspect = 'equal' option to preserve the square pixel dimensions. The rasterize = True will help save memory and reduces the size of this notebook. For higher quality outputs, this can be omitted.\n\nds_geo.sel(wavelengths=850, method='nearest').hvplot.image(cmap='viridis', aspect = 'equal', rasterize=True) +\\\n     ds.sel(wavelengths=850, method='nearest').hvplot.image(cmap='viridis', aspect = 'equal', rasterize=True) \n\nWe an also plot the data against an imagery tile using the geo=True and tiles= parameters instead of . Any tile source available in geoviews should work here. This will change the axis names, but that can be fixed by adding them manually in the options, like below.\n\nds_geo.sel(wavelengths=850, method='nearest').hvplot.image(cmap='viridis', frame_width=500, geo=True, tiles='EsriImagery').opts(\n    xlabel=f'{ds_geo.longitude.long_name} ({ds_geo.longitude.units})', ylabel=f'{ds_geo.latitude.long_name} ({ds_geo.latitude.units})')\n\nWe can see that the orthorectification step placed the data on a geogrpahic grid that matches pretty well with ESRI tiles. Now that we have a better idea of what the target area looks like, we can also plot the spectra using the georeferenced data. First, filter out the water absorption bands like we did earlier. By limiting the third dimension of the array to good_wavelengths.\n\nds_geo['reflectance'].data[:,:,ds_geo['good_wavelengths'].data==0] = np.nan\n\nNow, plot the spectra at the Lat/Lon coordinates provided below.\n\npoint = ds_geo.sel(longitude=-61.833,latitude=-39.710,method='nearest')\npoint.hvplot.line(y='reflectance',x='wavelengths', color='black', frame_width=400).opts(\n    title = f'Latitude = {point.latitude.values.round(3)}, Longitude = {point.longitude.values.round(3)}')"
  },
  {
    "objectID": "tutorials/Exploring_EMIT_L2A_Reflectance.html#writing-an-orthorectified-output",
    "href": "tutorials/Exploring_EMIT_L2A_Reflectance.html#writing-an-orthorectified-output",
    "title": "Exploring L2A Reflectance",
    "section": "1.6 Writing an Orthorectified Output",
    "text": "1.6 Writing an Orthorectified Output\nAt this point, the ds_geo orthorectified EMIT data can also be written as a flattened netCDF4 output that can be read using the xarray.open_dataset function, if desired.\n\n#ds_geo.to_netcdf('../data/geo_ds_out.nc')\n\n# Example for Opening \n# ds = xr.open_dataset('../data/geo_ds_out.nc')"
  },
  {
    "objectID": "tutorials/Exploring_EMIT_L2A_Reflectance.html#interactive-spatial-and-spectral-plots",
    "href": "tutorials/Exploring_EMIT_L2A_Reflectance.html#interactive-spatial-and-spectral-plots",
    "title": "Exploring L2A Reflectance",
    "section": "1.7 Interactive Spatial and Spectral Plots",
    "text": "1.7 Interactive Spatial and Spectral Plots\nCombining the Spatial and Spectral information into a single visualization can be a powerful tool for exploring and inspecting imaging spectroscopy data. Using the streams module from Holoviews we can link a spatial map to a plot of spectra.\nWe could plot a single band image as we previously have, but using a multiband image, like an RGB may help infer what targets we’re examining. Build an RGB image following the steps below.\nSelect bands to represent red (650 nm), green (560 nm), and blue (470 nm) by finding the nearest to a wavelength chosen to represent that color.\n\nNote that if subsetting by bands like this example, it is more memory efficient to subset before orthorectifying. Instead of using ortho=True in the emit_xarray function, select bands first, then apply the orthorectification using the ortho_xr function from emit_tools.py (requires a separate import).\n\n\nrgb = ds_geo.sel(wavelengths=[650, 560, 470], method='nearest')\nrgb\n\nNext, write a function to scale the values using a gamma correction. Without applying this scaling the majority of the image would be very dark, with the reflectance data being skewed by the few pixels with very high reflectance. &gt; Note: This has no impact on analysis or data, just visualizing the RGB map.\n\n# Function to adjust gamma across all bands - adjust brightness\ndef gamma_adjust(rgb_ds, bright=0.2, white_background=False):\n    array = rgb_ds.reflectance.data\n    gamma = math.log(bright)/math.log(np.nanmean(array)) # Create exponent for gamma scaling - can be adjusted by changing 0.2 \n    scaled = np.power(array,gamma).clip(0,1) # Apply scaling and clip to 0-1 range\n    if white_background == True:\n        scaled = np.nan_to_num(scaled, nan = 1) # Assign NA's to 1 so they appear white in plots\n    rgb_ds.reflectance.data = scaled\n    return rgb_ds\n\n\nrgb = gamma_adjust(rgb, white_background=True)\n\nNow that we have an RGB dataset, use it to build our spatial plot.\n\nmap = rgb.hvplot.rgb(x='longitude', y='latitude', bands='wavelengths', aspect = 'equal', frame_width=400)\n\nTo visualize the spectral and spatial data side-by-side, we use the pointerXY and Tap functions from the streams module from the holoviews library.\nDefine objects resulting from the stream of the pointer x and y position on our spatial plot, map, then define objects resulting from a clicked x and y position on the same map.\nNext, build a function to plot the spectra based on these two sets of x and y coordinates on the map. This will allow us to return spectra from a position we clicked on the image, and spectra where the mouse is currently hovering, allowing comparison of pixel reflectance values.\n\n# Stream of X and Y positional data\nposxy = hv.streams.PointerXY(source=map, x=-61.833, y=-39.710) \nclickxy = hv.streams.Tap(source=map, x=-61.833, y=-39.710) \n\n# Function to build a new spectral plot based on mouse hover positional information retrieved from the RGB image using our full reflectance dataset \ndef point_spectra(x,y):\n    return ds_geo.sel(longitude=x,latitude=y,method='nearest').hvplot.line(y='reflectance',x='wavelengths',\n                                                                           color='#1b9e77', frame_width=400)\n# Function to build spectral plot of clicked location to show on hover stream plot\ndef click_spectra(x,y):\n    clicked = ds_geo.sel(longitude=x,latitude=y,method='nearest')\n    return clicked.hvplot.line(y='reflectance',x='wavelengths', color='black', frame_width=400).opts(\n        title = f'Latitude = {clicked.latitude.values.round(3)}, Longitude = {clicked.longitude.values.round(3)}')\n# Define the Dynamic Maps\npoint_dmap = hv.DynamicMap(point_spectra, streams=[posxy])\nclick_dmap = hv.DynamicMap(click_spectra, streams=[clickxy])\n\n# Plot the Map and Dynamic Map side by side\n(map + click_dmap*point_dmap)"
  },
  {
    "objectID": "tutorials/Exploring_EMIT_L2A_Reflectance.html#contact-info",
    "href": "tutorials/Exploring_EMIT_L2A_Reflectance.html#contact-info",
    "title": "Exploring L2A Reflectance",
    "section": "Contact Info:",
    "text": "Contact Info:\nEmail: LPDAAC@usgs.gov\nVoice: +1-866-573-3222\nOrganization: Land Processes Distributed Active Archive Center (LP DAAC)¹\nWebsite: https://lpdaac.usgs.gov/\nDate last modified: 06-29-2022\n¹Work performed under USGS contract G15PD00467 for NASA contract NNG14HH33I."
  },
  {
    "objectID": "python-setup/index.html",
    "href": "python-setup/index.html",
    "title": "EMIT Data Resources",
    "section": "",
    "text": "Placeholder"
  }
]